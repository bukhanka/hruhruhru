/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ ElevenLabs API —Å –ø—Ä–æ–∫—Å–∏
 */
import dotenv from 'dotenv';
import { HttpsProxyAgent } from 'https-proxy-agent';
import fetch from 'node-fetch';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: '.env.local' });

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏
import "../lib/proxy-config";

async function testElevenLabsAPI() {
  console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ElevenLabs API...\n');
  
  const API_KEY = process.env.ELEVENLABS_API_KEY;
  
  if (!API_KEY) {
    console.error('‚ùå ELEVENLABS_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env.local');
    process.exit(1);
  }
  
  console.log('‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω:', API_KEY.substring(0, 20) + '...');
  console.log('üåê –ü—Ä–æ–∫—Å–∏:', process.env.HTTPS_PROXY ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω' : '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
  
  // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  console.log('\nüìã –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ...');
  
  try {
    const userResponse = await fetch('https://api.elevenlabs.io/v1/user', {
      method: 'GET',
      headers: {
        'xi-api-key': API_KEY,
      },
      // @ts-ignore
      agent: process.env.HTTPS_PROXY ? new HttpsProxyAgent(process.env.HTTPS_PROXY) : undefined,
    });
    
    if (!userResponse.ok) {
      const errorText = await userResponse.text();
      console.error(`‚ùå –û—à–∏–±–∫–∞ ${userResponse.status}:`, errorText);
      
      if (userResponse.status === 401) {
        console.log('\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –æ—à–∏–±–∫–∏ 401:');
        console.log('   1. –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á');
        console.log('   2. –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–ø–ª–∞—Ç–æ–π –ø–æ–¥–ø–∏—Å–∫–∏');
        console.log('   3. API –∫–ª—é—á –æ—Ç–æ–∑–≤–∞–Ω');
        console.log('\nüîó –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç: https://elevenlabs.io/app/settings/api-keys');
      }
      
      if (userResponse.status === 302) {
        console.log('\nüí° –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ:');
        console.log('   ElevenLabs –±–ª–æ–∫–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø –∏–∑ –≤–∞—à–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞');
        console.log('   –¢—Ä–µ–±—É–µ—Ç—Å—è VPN –∏–ª–∏ –ø—Ä–æ–∫—Å–∏');
      }
      
      return;
    }
    
    const userData = await userResponse.json();
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', JSON.stringify(userData, null, 2));
    
    // –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
    console.log('\nüìã –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π...');
    
    const modelsResponse = await fetch('https://api.elevenlabs.io/v1/models', {
      method: 'GET',
      headers: {
        'xi-api-key': API_KEY,
      },
      // @ts-ignore
      agent: process.env.HTTPS_PROXY ? new HttpsProxyAgent(process.env.HTTPS_PROXY) : undefined,
    });
    
    if (modelsResponse.ok) {
      const models = await modelsResponse.json();
      console.log('‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:', models);
    } else {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–æ–¥–µ–ª–∏');
    }
    
    // –¢–µ—Å—Ç 3: –¢–µ—Å—Ç–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∑–≤—É–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–≤–æ—Ç–∞)
    console.log('\nüìã –¢–µ—Å—Ç 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–≤—É–∫–∞...');
    console.log('‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é "simple keyboard click sound"...');
    
    const soundResponse = await fetch('https://api.elevenlabs.io/v1/sound-generation', {
      method: 'POST',
      headers: {
        'xi-api-key': API_KEY,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        text: 'simple keyboard click sound',
        duration_seconds: 1,
        prompt_influence: 0.5,
      }),
      // @ts-ignore
      agent: process.env.HTTPS_PROXY ? new HttpsProxyAgent(process.env.HTTPS_PROXY) : undefined,
    });
    
    if (!soundResponse.ok) {
      const errorText = await soundResponse.text();
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–≤—É–∫–∞ ${soundResponse.status}:`, errorText);
      return;
    }
    
    const soundBlob = await soundResponse.arrayBuffer();
    console.log(`‚úÖ –ó–≤—É–∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: ${soundBlob.byteLength} –±–∞–π—Ç`);
    
    console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! ElevenLabs API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
    
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    
    if (error.message.includes('ECONNREFUSED')) {
      console.log('\nüí° –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:');
      console.log('   1. –î–æ—Å—Ç—É–ø –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É');
      console.log('   2. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏');
    }
  }
}

testElevenLabsAPI().catch(console.error);

