import { GoogleGenAI } from "@google/genai";
import * as fs from "fs";
import * as path from "path";
import dotenv from "dotenv";

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env.local
dotenv.config({ path: '.env.local' });

// –ï–¥–∏–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è Gemini + Imagen
const ai = new GoogleGenAI({
  apiKey: process.env.GOOGLE_API_KEY!,
});

// –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (3 —à—Ç—É–∫–∏ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º —Ö–∞–∫–∞—Ç–æ–Ω–∞)
const professions = [
  { name: "DevOps Engineer", level: "Middle", company: "—Å—Ç–∞—Ä—Ç–∞–ø" },
  { name: "Frontend Developer", level: "Junior", company: "—Å—Ç–∞—Ä—Ç–∞–ø" },
  { name: "–ë–∞—Ä–∏—Å—Ç–∞", level: "Junior", company: "–∫–æ—Ñ–µ–π–Ω—è" }, // –Ω–µ-IT
];

async function generateProfessionData(profession: string, level: string, company: string) {
  console.log(`  –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç...`);

  const prompt = `
–°–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –¥–ª—è "${profession}" —É—Ä–æ–≤–Ω—è ${level} –≤ ${company}.

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON (–±–µ–∑ markdown, –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤) —Å–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π:

{
  "profession": "${profession}",
  "level": "${level}",
  "company": "${company}",
  "schedule": [
    {
      "time": "10:00",
      "title": "–Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
      "emoji": "‚è∞",
      "description": "–∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ —Ü–∏—Ç–∞—Ç–∞",
      "detail": "–¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, —á—Ç–æ –¥–µ–ª–∞–µ—à—å, –∫–∞–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å"
    }
  ],
  "stack": ["—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è1", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è2", "–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç1"],
  "benefits": [
    {
      "icon": "‚ú®",
      "text": "–∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –ø–æ–ª—å–∑–∞ —Å —Ü–∏—Ñ—Ä–∞–º–∏ –∏–ª–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏"
    }
  ],
  "careerPath": [
    {
      "level": "Junior",
      "years": "1-2–≥",
      "salary": "80k-150k"
    }
  ],
  "skills": [
    {
      "name": "–Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫–∏–ª–ª–∞",
      "level": 80
    }
  ],
  "dialog": {
    "message": "—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–æ–ª–ª–µ–≥–∏ –∏–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞",
    "options": ["–≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ 1", "–≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ 2", "–≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ 3"],
    "response": "—Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞"
  }
}

–í–ê–ñ–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- schedule: —Ä–æ–≤–Ω–æ 6 —Å–æ–±—ã—Ç–∏–π –∑–∞ —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å (—Å 10:00 –¥–æ 18:00)
- stack: 8-10 —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π/–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –¥–ª—è —ç—Ç–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
- benefits: —Ä–æ–≤–Ω–æ 4 –ø—É–Ω–∫—Ç–∞ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ü–∏—Ñ—Ä–∞–º–∏ –∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
- careerPath: —Ä–æ–≤–Ω–æ 4 —ç—Ç–∞–ø–∞ –∫–∞—Ä—å–µ—Ä—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∑–∞—Ä–ø–ª–∞—Ç–∞–º–∏ –≤ —Ä—É–±–ª—è—Ö
- skills: —Ä–æ–≤–Ω–æ 5 –∫–ª—é—á–µ–≤—ã—Ö —Å–∫–∏–ª–ª–æ–≤ —Å —É—Ä–æ–≤–Ω–µ–º –æ—Ç 40 –¥–æ 90
- dialog: —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Å –∫–æ–ª–ª–µ–≥–æ–π/–∫–ª–∏–µ–Ω—Ç–æ–º
- –í—Å—ë –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –∂–∏–≤–æ, —Å –¥–µ—Ç–∞–ª—è–º–∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã
- –ò—Å–ø–æ–ª—å–∑—É–π —Ä–∞–∑–Ω—ã–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –≤ schedule
- –í description –∏—Å–ø–æ–ª—å–∑—É–π —Ü–∏—Ç–∞—Ç—ã –∏–ª–∏ –∫–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–∑—ã –∏–∑ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
`;

  const response = await ai.models.generateContent({
    model: "gemini-2.5-flash",
    contents: prompt,
    config: {
      temperature: 0.9,
      responseMimeType: "application/json", // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ JSON
    },
  });
  
  const jsonText = response.text || '{}';
  return JSON.parse(jsonText);
}

async function generateImages(profession: string, slug: string) {
  console.log(`  –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...`);
  
  const prompts = [
    `Professional workspace for ${profession}, modern office desk setup, realistic photo, high quality`,
    `Computer screen showing dashboard and tools for ${profession}, close-up view, professional lighting`,
    `${profession} team collaboration, people working together, candid workplace photo`,
    `Tools and equipment used by ${profession}, organized workspace, professional photography`,
  ];

  const images = [];
  
  for (let i = 0; i < prompts.length; i++) {
    try {
      console.log(`    –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${i + 1}/4...`);
      
      const response = await ai.models.generateImages({
        model: 'imagen-4.0-fast-generate-001', // –ë—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Ö–∞–∫–∞—Ç–æ–Ω–∞
        prompt: prompts[i],
        config: {
          numberOfImages: 1,
          aspectRatio: "1:1",
        },
      });

      const image = response.generatedImages[0];
      const imageDir = path.join(process.cwd(), 'public', 'generated', slug);
      
      if (!fs.existsSync(imageDir)) {
        fs.mkdirSync(imageDir, { recursive: true });
      }

      const filename = `image-${i + 1}.png`;
      const filepath = path.join(imageDir, filename);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º base64 –≤ —Ñ–∞–π–ª
      const buffer = Buffer.from(image.image.imageBytes, 'base64');
      fs.writeFileSync(filepath, buffer);
      
      images.push(`/generated/${slug}/${filename}`);
      console.log(`    ‚úì –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${filename}`);
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 1000));
    } catch (error: any) {
      console.error(`    ‚úó –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${i + 1}:`, error.message);
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –µ—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
      images.push(`https://placehold.co/400x400/1e293b/9333ea?text=Image+${i + 1}`);
    }
  }

  return images;
}

async function fetchYouTubeVideos(profession: string) {
  console.log(`  –ò—â—É –≤–∏–¥–µ–æ –Ω–∞ YouTube...`);
  
  if (!process.env.YOUTUBE_API_KEY) {
    console.log(`    ‚ö† YOUTUBE_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—é...`);
    return [];
  }
  
  try {
    const query = `${profession} –¥–µ–Ω—å –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏`;
    
    const response = await fetch(
      `https://www.googleapis.com/youtube/v3/search?` +
      `part=snippet&q=${encodeURIComponent(query)}&` +
      `type=video&videoDuration=short&maxResults=6&` +
      `order=relevance&key=${process.env.YOUTUBE_API_KEY}`
    );
    
    const data = await response.json();
    
    if (data.error) {
      console.error(`    ‚úó YouTube API –æ—à–∏–±–∫–∞:`, data.error.message);
      return [];
    }
    
    const videos = data.items?.map((item: any) => ({
      videoId: item.id.videoId,
      title: item.snippet.title,
      thumbnail: item.snippet.thumbnails.medium.url,
      channelTitle: item.snippet.channelTitle,
    })) || [];
    
    console.log(`    ‚úì –ù–∞–π–¥–µ–Ω–æ ${videos.length} –≤–∏–¥–µ–æ`);
    
    return videos;
  } catch (error: any) {
    console.error(`    ‚úó –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤–∏–¥–µ–æ:`, error.message);
    return [];
  }
}

async function fetchVacanciesStats(profession: string) {
  console.log(`  –ü–æ–ª—É—á–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∞–∫–∞–Ω—Å–∏–π —Å HH.ru...`);
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-20 –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const response = await fetch(
      `https://api.hh.ru/vacancies?text=${encodeURIComponent(profession)}&per_page=20&order_by=relevance`
    );
    const data = await response.json();
    
    const found = data.found || 0;
    const competition = found > 1000 ? '–≤—ã—Å–æ–∫–∞—è' : 
                       found > 500 ? '—Å—Ä–µ–¥–Ω—è—è' : '–Ω–∏–∑–∫–∞—è';
    
    // –ü–∞—Ä—Å–∏–º –∑–∞—Ä–ø–ª–∞—Ç—ã –∏ –∫–æ–º–ø–∞–Ω–∏–∏
    const salaries: number[] = [];
    const companies: string[] = [];
    
    data.items?.forEach((vacancy: any) => {
      if (vacancy.salary?.from) {
        salaries.push(vacancy.salary.from);
      }
      if (vacancy.salary?.to) {
        salaries.push(vacancy.salary.to);
      }
      if (vacancy.employer?.name) {
        companies.push(vacancy.employer.name);
      }
    });
    
    // –°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞
    const avgSalary = salaries.length > 0 
      ? Math.round(salaries.reduce((a, b) => a + b, 0) / salaries.length)
      : null;
    
    // –¢–æ–ø –∫–æ–º–ø–∞–Ω–∏–∏ (—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ, –ø–µ—Ä–≤—ã–µ 5)
    const topCompanies = [...new Set(companies)].slice(0, 5);
    
    console.log(`    ‚úì –ù–∞–π–¥–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π: ${found}`);
    if (avgSalary) {
      console.log(`    ‚úì –°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞: ${avgSalary.toLocaleString('ru-RU')} ‚ÇΩ`);
    }
    if (topCompanies.length > 0) {
      console.log(`    ‚úì –¢–æ–ø –∫–æ–º–ø–∞–Ω–∏–∏: ${topCompanies.slice(0, 3).join(', ')}`);
    }
    
    return {
      vacancies: found,
      competition,
      avgSalary,
      topCompanies,
    };
  } catch (error: any) {
    console.error(`    ‚úó –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π:`, error.message);
    return {
      vacancies: 0,
      competition: '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
      avgSalary: null,
      topCompanies: [],
    };
  }
}

async function generateAll() {
  console.log('\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–æ—Ñ–µ—Å—Å–∏–π...\n');
  console.log(`–í—Å–µ–≥–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π: ${professions.length}\n`);
  
  if (!process.env.GOOGLE_API_KEY) {
    console.error('‚ùå –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω GOOGLE_API_KEY –≤ .env.local');
    console.error('   –°–æ–∑–¥–∞–π —Ñ–∞–π–ª .env.local –∏ –¥–æ–±–∞–≤—å: GOOGLE_API_KEY=—Ç–≤–æ–π_–∫–ª—é—á');
    process.exit(1);
  }
  
  const dataDir = path.join(process.cwd(), 'data', 'professions');
  if (!fs.existsSync(dataDir)) {
    fs.mkdirSync(dataDir, { recursive: true });
  }

  const results = [];

  for (let i = 0; i < professions.length; i++) {
    const prof = professions[i];
    console.log(`\n[${ i + 1}/${professions.length}] üìù ${prof.name} (${prof.level} –≤ ${prof.company})`);
    console.log('‚îÄ'.repeat(60));
    
    try {
      // 1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ Gemini
      const data = await generateProfessionData(prof.name, prof.level, prof.company);
      
      // –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
      const translitMap: Record<string, string> = {
        '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo', 
        '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm', 
        '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u', 
        '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch', 
        '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya'
      };
      
      const slug = prof.name
        .toLowerCase()
        .split('')
        .map(char => translitMap[char] || char)
        .join('')
        .replace(/\s+/g, '-')
        .replace(/[^a-z0-9\-]/g, '');
      
      // 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ Imagen
      const images = await generateImages(prof.name, slug);
      
      // 3. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π –∏–∑ HH.ru API
      const vacanciesStats = await fetchVacanciesStats(prof.name);
      
      // 4. –ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ –Ω–∞ YouTube
      const videos = await fetchYouTubeVideos(prof.name);
      
      // 5. –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å—ë –≤ –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç
      const fullData = {
        ...data,
        slug,
        images,
        ...vacanciesStats,
        videos,
        generatedAt: new Date().toISOString(),
      };

      // 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON —Ñ–∞–π–ª
      const filepath = path.join(dataDir, `${slug}.json`);
      fs.writeFileSync(filepath, JSON.stringify(fullData, null, 2), 'utf-8');
      
      console.log(`  ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: data/professions/${slug}.json`);
      
      results.push({ slug, profession: prof.name, success: true });
      
      // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º–∏ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å rate limits
      if (i < professions.length - 1) {
        console.log('\n  ‚è≥ –ü–∞—É–∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã...');
        await new Promise(resolve => setTimeout(resolve, 3000));
      }
      
    } catch (error: any) {
      console.error(`  ‚ùå –û–®–ò–ë–ö–ê –¥–ª—è ${prof.name}:`, error.message);
      results.push({ slug: '', profession: prof.name, success: false, error: error.message });
    }
  }
  
  console.log('\n' + '='.repeat(60));
  console.log('üéâ –ì–ï–ù–ï–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!\n');
  
  console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
  results.forEach(r => {
    if (r.success) {
      console.log(`  ‚úÖ ${r.profession} ‚Üí data/professions/${r.slug}.json`);
    } else {
      console.log(`  ‚ùå ${r.profession} ‚Üí –û–®–ò–ë–ö–ê`);
    }
  });
  
  const successCount = results.filter(r => r.success).length;
  console.log(`\n–£—Å–ø–µ—à–Ω–æ: ${successCount}/${results.length}`);
  
  if (successCount > 0) {
    console.log('\nüí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å: npm run dev');
  }
}

generateAll().catch(console.error);

