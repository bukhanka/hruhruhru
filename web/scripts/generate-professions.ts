import { GoogleGenAI, Type } from "@google/genai";
import * as fs from "fs";
import * as path from "path";
import dotenv from "dotenv";

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env.local
dotenv.config({ path: '.env.local' });

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏ (–∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ dotenv, —á—Ç–æ–±—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –±—ã–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
import "../lib/proxy-config";

// –ï–¥–∏–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è Gemini + Imagen
const ai = new GoogleGenAI({
  apiKey: process.env.GOOGLE_API_KEY!,
});

// –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);
const WITH_AUDIO = args.includes('--with-audio') || args.includes('--audio');

// –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (3 —à—Ç—É–∫–∏ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º —Ö–∞–∫–∞—Ç–æ–Ω–∞)
const professions = [
  { name: "DevOps Engineer", level: "Middle", company: "—Å—Ç–∞—Ä—Ç–∞–ø" },
  { name: "Frontend Developer", level: "Junior", company: "—Å—Ç–∞—Ä—Ç–∞–ø" },
  { name: "–ë–∞—Ä–∏—Å—Ç–∞", level: "Junior", company: "–∫–æ—Ñ–µ–π–Ω—è" }, // –Ω–µ-IT
];

// Retry —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
async function withRetry<T>(
  fn: () => Promise<T>,
  maxRetries: number = 3,
  delayMs: number = 1000
): Promise<T> {
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      return await fn();
    } catch (error: any) {
      const isLastAttempt = attempt === maxRetries;
      
      if (isLastAttempt) {
        throw error;
      }
      
      console.log(`    ‚ö†Ô∏è  –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ —É–¥–∞–ª–∞—Å—å: ${error.message}`);
      console.log(`    üîÑ –ü–æ–≤—Ç–æ—Ä—è—é —á–µ—Ä–µ–∑ ${delayMs}ms...`);
      await new Promise(resolve => setTimeout(resolve, delayMs));
    }
  }
  throw new Error('Unreachable');
}

async function generateProfessionData(profession: string, level: string, company: string) {
  console.log(`  –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç...`);

  const prompt = `
–°–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –¥–ª—è "${profession}" —É—Ä–æ–≤–Ω—è ${level} –≤ ${company}.

–í–ê–ñ–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- schedule: —Ä–æ–≤–Ω–æ 6 —Å–æ–±—ã—Ç–∏–π –∑–∞ —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å (—Å 10:00 –¥–æ 18:00)
  * –î–ª—è –ö–ê–ñ–î–û–ì–û —Å–æ–±—ã—Ç–∏—è —Å–æ–∑–¥–∞–π audioPrompt - –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ASMR-–∑–≤—É–∫–∞
  * audioPrompt –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ –¥–ª—è ElevenLabs API
  * audioPrompt –¥–æ–ª–∂–µ–Ω –æ–ø–∏—Å—ã–≤–∞—Ç—å –ø—Ä–∏—è—Ç–Ω—ã–µ, —Ä–∞—Å—Å–ª–∞–±–ª—è—é—â–∏–µ –∑–≤—É–∫–∏ —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ (ASMR-—Å—Ç–∏–ª—å)
  * –í–∫–ª—é—á–∏ –≤ audioPrompt: –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–≤—É–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤, –≥–æ–ª–æ—Å–∞, —Ñ–æ–Ω–æ–≤—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É
  * –ü—Ä–∏–º–µ—Ä—ã –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤:
    - "Pleasant ASMR coffee shop morning: espresso machine steaming milk, gentle cups clinking, soft friendly barista voice, warm cozy ambience, crisp spatial audio"
    - "Satisfying ASMR coding session: rhythmic mechanical keyboard typing Cherry MX switches, soft mouse clicks, gentle focused breathing, peaceful concentration, premium binaural quality"
- stack: 8-10 —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π/–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –¥–ª—è —ç—Ç–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
- benefits: —Ä–æ–≤–Ω–æ 4 –ø—É–Ω–∫—Ç–∞ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ü–∏—Ñ—Ä–∞–º–∏ –∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
- careerPath: —Ä–æ–≤–Ω–æ 4 —ç—Ç–∞–ø–∞ –∫–∞—Ä—å–µ—Ä—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∑–∞—Ä–ø–ª–∞—Ç–∞–º–∏ –≤ —Ä—É–±–ª—è—Ö
- skills: —Ä–æ–≤–Ω–æ 5 –∫–ª—é—á–µ–≤—ã—Ö —Å–∫–∏–ª–ª–æ–≤ —Å —É—Ä–æ–≤–Ω–µ–º –æ—Ç 40 –¥–æ 90
- dialog: —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Å –∫–æ–ª–ª–µ–≥–æ–π/–∫–ª–∏–µ–Ω—Ç–æ–º
- –í—Å—ë –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ (–∫—Ä–æ–º–µ audioPrompt)
- –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –∂–∏–≤–æ, —Å –¥–µ—Ç–∞–ª—è–º–∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã
- –ò—Å–ø–æ–ª—å–∑—É–π —Ä–∞–∑–Ω—ã–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –≤ schedule
- –í description –∏—Å–ø–æ–ª—å–∑—É–π —Ü–∏—Ç–∞—Ç—ã –∏–ª–∏ –∫–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–∑—ã –∏–∑ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
`;

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º structured output (SOTA –ø–æ–¥—Ö–æ–¥) –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –≤–∞–ª–∏–¥–Ω–æ–≥–æ JSON
  const responseSchema = {
    type: Type.OBJECT,
    properties: {
      profession: { type: Type.STRING },
      level: { type: Type.STRING },
      company: { type: Type.STRING },
      schedule: {
        type: Type.ARRAY,
        items: {
          type: Type.OBJECT,
          properties: {
            time: { type: Type.STRING },
            title: { type: Type.STRING },
            emoji: { type: Type.STRING },
            description: { type: Type.STRING },
            detail: { type: Type.STRING },
            audioPrompt: { type: Type.STRING }, // –ü—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–≤—É–∫–∞ —á–µ—Ä–µ–∑ ElevenLabs
          },
          required: ["time", "title", "emoji", "description", "detail", "audioPrompt"],
        },
      },
      stack: {
        type: Type.ARRAY,
        items: { type: Type.STRING },
      },
      benefits: {
        type: Type.ARRAY,
        items: {
          type: Type.OBJECT,
          properties: {
            icon: { type: Type.STRING },
            text: { type: Type.STRING },
          },
          required: ["icon", "text"],
        },
      },
      careerPath: {
        type: Type.ARRAY,
        items: {
          type: Type.OBJECT,
          properties: {
            level: { type: Type.STRING },
            years: { type: Type.STRING },
            salary: { type: Type.STRING },
          },
          required: ["level", "years", "salary"],
        },
      },
      skills: {
        type: Type.ARRAY,
        items: {
          type: Type.OBJECT,
          properties: {
            name: { type: Type.STRING },
            level: { type: Type.NUMBER },
          },
          required: ["name", "level"],
        },
      },
      dialog: {
        type: Type.OBJECT,
        properties: {
          message: { type: Type.STRING },
          options: {
            type: Type.ARRAY,
            items: { type: Type.STRING },
          },
          response: { type: Type.STRING },
        },
        required: ["message", "options", "response"],
      },
    },
    required: ["profession", "level", "company", "schedule", "stack", "benefits", "careerPath", "skills", "dialog"],
  };

  return await withRetry(async () => {
    const response = await ai.models.generateContent({
      model: "gemini-2.0-flash",
      contents: prompt,
      config: {
        temperature: 0.9,
        responseMimeType: "application/json",
        responseSchema: responseSchema, // Structured output –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –≤–∞–ª–∏–¥–Ω–æ–≥–æ JSON
      },
    });
    
    const jsonText = response.text || '{}';
    return JSON.parse(jsonText);
  }, 3, 2000);
}

async function generateImages(profession: string, slug: string) {
  console.log(`  –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...`);
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, IT –ø—Ä–æ—Ñ–µ—Å—Å–∏—è –∏–ª–∏ –Ω–µ—Ç (–¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤)
  const isITProfession = profession.toLowerCase().includes('developer') || 
                         profession.toLowerCase().includes('devops') ||
                         profession.toLowerCase().includes('engineer') ||
                         profession.toLowerCase().includes('–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç') ||
                         profession.toLowerCase().includes('—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫');
  
  let prompts: string[];
  
  if (isITProfession) {
    // –ü—Ä–æ–º–ø—Ç—ã –¥–ª—è IT: —Ñ–æ–∫—É—Å –Ω–∞ —ç–∫—Ä–∞–Ω—ã, –∫–æ–¥, —Ö–∞–æ—Å —Ä–∞–±–æ—á–µ–≥–æ –º–µ—Å—Ç–∞
    prompts = [
      // 1. –†–∞–±–æ—á–∏–π –º–æ–º–µ–Ω—Ç POV —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —ç–∫—Ä–∞–Ω–∞–º–∏
      `First-person view POV: ${profession} hands typing on mechanical keyboard, RGB backlight, dual monitors showing real code editor and terminal with commands, energy drink can, sticky notes with passwords on monitor frame, tangled cables, warm desk lamp light, 2am vibe, authentic programmer workspace chaos, ultrarealistic`,
      
      // 2. –ö—Ä—É–ø–Ω—ã–π –ø–ª–∞–Ω —ç–∫—Ä–∞–Ω–∞ —Å —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–æ–π
      `Extreme close-up: computer screen showing authentic ${profession} work - IDE with code, terminal logs scrolling, browser with Stack Overflow tabs, Slack message notifications popping, GitHub commits, blinking cursor, slight screen glare, coffee stain on desk visible in corner, person's tired reflection in screen, dim room lighting, cinematic`,
      
      // 3. –í–∏–¥ —Å–≤–µ—Ä—Ö—É –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ä–∞–±–æ—á–∏–π —Å—Ç–æ–ª
      `Flat lay top-down: ${profession} messy workspace during active work - laptop covered with developer stickers (Linux, GitHub, etc), second monitor, mechanical keyboard, gaming mouse, smartphone showing work messages, open notebook with handwritten schemas and bugs, 3 coffee mugs, snack wrappers, USB cables everywhere, AirPods, smartwatch, afternoon natural light, authentic chaos`,
      
      // 4. –ú–æ–º–µ–Ω—Ç –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –≤ –Ω–æ—á–Ω–æ–π —Ä–∞–±–æ—Ç–µ
      `Cinematic wide shot: ${profession} deep in flow state at night, wearing hoodie, side profile, face illuminated only by multiple monitor glow in dark room, messy hair, intense focused expression, can of energy drink in hand, pizza box on desk, headphones on, code visible on screens, moody cyberpunk aesthetic, realistic photography`,
    ];
  } else {
    // –ü—Ä–æ–º–ø—Ç—ã –¥–ª—è –Ω–µ-IT –ø—Ä–æ—Ñ–µ—Å—Å–∏–π: —Ñ–æ–∫—É—Å –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ, –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –∞—Ç–º–æ—Å—Ñ–µ—Ä—É
    prompts = [
      // 1. –†–∞–±–æ—á–∏–π –º–æ–º–µ–Ω—Ç –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞
      `First-person POV: ${profession} hands actively working, professional tools in use, realistic workplace environment, customers or colleagues visible in background, natural lighting, candid authentic moment, movement and energy, real-life mess and activity`,
      
      // 2. –ö—Ä—É–ø–Ω—ã–π –ø–ª–∞–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–±–æ—Ç—ã
      `Close-up shot: ${profession} professional equipment and tools being used, hands in action, detailed view of craft, authentic wear and tear on tools, workspace details, natural lighting, professional photography, realistic working conditions`,
      
      // 3. –í–∏–¥ —Å–≤–µ—Ä—Ö—É –Ω–∞ —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
      `Flat lay overhead view: ${profession} workspace during busy shift - all necessary tools laid out, work in progress, organized chaos, professional equipment, order receipts or work documents, smartphone, keys, water bottle, authentic workspace mess, natural daylight`,
      
      // 4. –ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ —Ä–∞–∑–≥–∞—Ä —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
      `Cinematic environmental shot: ${profession} in action during peak hours, dynamic movement, real customers or team around, authentic workplace atmosphere, natural expressions, busy environment, professional uniform or work attire, realistic lighting, documentary photography style, capturing the vibe and energy`,
    ];
  }
  
  console.log(`  –¢–∏–ø –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏: ${isITProfession ? 'IT' : '–Ω–µ-IT'}`);
  console.log(`  –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
  

  const images = [];
  
  for (let i = 0; i < prompts.length; i++) {
    console.log(`    –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${i + 1}/4...`);
    
    try {
      const imagePath = await withRetry(async () => {
        const response = await ai.models.generateImages({
          model: 'imagen-3.0-generate-002', // –ë—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Ö–∞–∫–∞—Ç–æ–Ω–∞
          prompt: prompts[i],
          config: {
            numberOfImages: 1,
            aspectRatio: "1:1",
          },
        });

        if (!response.generatedImages || response.generatedImages.length === 0) {
          throw new Error('No images generated');
        }

        const image = response.generatedImages[0];
        if (!image.image?.imageBytes) {
          throw new Error('Image data is missing');
        }

        const imageDir = path.join(process.cwd(), 'public', 'generated', slug);
        
        if (!fs.existsSync(imageDir)) {
          fs.mkdirSync(imageDir, { recursive: true });
        }

        const filename = `image-${i + 1}.png`;
        const filepath = path.join(imageDir, filename);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º base64 –≤ —Ñ–∞–π–ª
        const buffer = Buffer.from(image.image.imageBytes, 'base64');
        fs.writeFileSync(filepath, buffer);
        
        return `/generated/${slug}/${filename}`;
      }, 2, 1500); // 2 –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–æ–Ω–∏ –¥–æ–ª–≥–æ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è)
      
      images.push(imagePath);
      console.log(`    ‚úì –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: image-${i + 1}.png`);
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 1000));
    } catch (error: any) {
      console.error(`    ‚úó –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${i + 1} –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫:`, error.message);
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –µ—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
      images.push(`https://placehold.co/400x400/1e293b/9333ea?text=Image+${i + 1}`);
    }
  }

  return images;
}

async function fetchYouTubeVideos(profession: string) {
  console.log(`  –ò—â—É –≤–∏–¥–µ–æ –Ω–∞ YouTube...`);
  
  if (!process.env.YOUTUBE_API_KEY) {
    console.log(`    ‚ö† YOUTUBE_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—é...`);
    return [];
  }
  
  try {
    const query = `${profession} –¥–µ–Ω—å –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏`;
    
    const response = await fetch(
      `https://www.googleapis.com/youtube/v3/search?` +
      `part=snippet&q=${encodeURIComponent(query)}&` +
      `type=video&videoDuration=short&maxResults=6&` +
      `order=relevance&key=${process.env.YOUTUBE_API_KEY}`
    );
    
    const data = await response.json();
    
    if (data.error) {
      console.error(`    ‚úó YouTube API –æ—à–∏–±–∫–∞:`, data.error.message);
      return [];
    }
    
    const videos = data.items?.map((item: any) => ({
      videoId: item.id.videoId,
      title: item.snippet.title,
      thumbnail: item.snippet.thumbnails.medium.url,
      channelTitle: item.snippet.channelTitle,
    })) || [];
    
    console.log(`    ‚úì –ù–∞–π–¥–µ–Ω–æ ${videos.length} –≤–∏–¥–µ–æ`);
    
    return videos;
  } catch (error: any) {
    console.error(`    ‚úó –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤–∏–¥–µ–æ:`, error.message);
    return [];
  }
}

async function fetchVacanciesStats(profession: string) {
  console.log(`  –ü–æ–ª—É—á–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∞–∫–∞–Ω—Å–∏–π —Å HH.ru...`);
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-20 –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑ –†–æ—Å—Å–∏–∏ (area=113)
    const response = await fetch(
      `https://api.hh.ru/vacancies?text=${encodeURIComponent(profession)}&per_page=20&order_by=relevance&area=113`
    );
    const data = await response.json();
    
    const found = data.found || 0;
    const competition = found > 1000 ? '–≤—ã—Å–æ–∫–∞—è' : 
                       found > 500 ? '—Å—Ä–µ–¥–Ω—è—è' : '–Ω–∏–∑–∫–∞—è';
    
    // –ü–∞—Ä—Å–∏–º –∑–∞—Ä–ø–ª–∞—Ç—ã –∏ –∫–æ–º–ø–∞–Ω–∏–∏
    const salaries: number[] = [];
    const companies: string[] = [];
    
    data.items?.forEach((vacancy: any) => {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–∫–∞–Ω—Å–∏–∏ —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π –≤ —Ä—É–±–ª—è—Ö (RUR)
      if (vacancy.salary && vacancy.salary.currency === 'RUR') {
        const from = vacancy.salary.from;
        const to = vacancy.salary.to;
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏
        if (from && to) {
          // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –æ–±–∞ –∑–Ω–∞—á–µ–Ω–∏—è, –±–µ—Ä–µ–º —Å—Ä–µ–¥–Ω–µ–µ
          salaries.push((from + to) / 2);
        } else if (from) {
          // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ "–æ—Ç", –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
          salaries.push(from);
        } else if (to) {
          // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ "–¥–æ", –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
          salaries.push(to);
        }
      }
      
      if (vacancy.employer?.name) {
        companies.push(vacancy.employer.name);
      }
    });
    
    // –°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞ (–æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ç—ã—Å—è—á)
    const avgSalary = salaries.length > 0 
      ? Math.round(salaries.reduce((a, b) => a + b, 0) / salaries.length / 1000) * 1000
      : null;
    
    // –¢–æ–ø –∫–æ–º–ø–∞–Ω–∏–∏ (—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ, –ø–µ—Ä–≤—ã–µ 5)
    const topCompanies = [...new Set(companies)].slice(0, 5);
    
    console.log(`    ‚úì –ù–∞–π–¥–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π: ${found}`);
    if (avgSalary) {
      console.log(`    ‚úì –°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞: ${avgSalary.toLocaleString('ru-RU')} ‚ÇΩ (–Ω–∞ –æ—Å–Ω–æ–≤–µ ${salaries.length} –≤–∞–∫–∞–Ω—Å–∏–π —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç–æ–π)`);
    } else {
      console.log(`    ‚ö† –°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –≤ –≤–∞–∫–∞–Ω—Å–∏—è—Ö`);
    }
    if (topCompanies.length > 0) {
      console.log(`    ‚úì –¢–æ–ø –∫–æ–º–ø–∞–Ω–∏–∏: ${topCompanies.slice(0, 3).join(', ')}`);
    }
    
    return {
      vacancies: found,
      competition,
      avgSalary,
      topCompanies,
    };
  } catch (error: any) {
    console.error(`    ‚úó –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π:`, error.message);
    return {
      vacancies: 0,
      competition: '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
      avgSalary: null,
      topCompanies: [],
    };
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–≤—É–∫–æ–≤ —á–µ—Ä–µ–∑ ElevenLabs API (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
async function generateAudio(slug: string, schedule: any[]) {
  console.log(`  üéß –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∑–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è ${schedule.length} —Å–æ–±—ã—Ç–∏–π...`);
  
  if (!process.env.ELEVENLABS_API_KEY) {
    console.log(`    ‚ö† ELEVENLABS_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∑–≤—É–∫–æ–≤`);
    console.log(`    üí° –î–æ–±–∞–≤—å—Ç–µ ELEVENLABS_API_KEY –≤ .env.local –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–≤—É–∫–æ–≤`);
    return null;
  }
  
  try {
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º audio-generator –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
    const { generateSoundEffect, saveSoundToFile } = await import('../lib/audio-generator');
    
    const timelineSounds: Array<{ id: string; timeSlot: string; url: string }> = [];
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–≤—É–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–æ–º–ø—Ç—ã –∏–∑ LLM
    for (let i = 0; i < schedule.length; i++) {
      const scheduleItem = schedule[i];
      const soundId = `timeline-${scheduleItem.time.replace(':', '-')}`;
      
      console.log(`    –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∑–≤—É–∫ ${i + 1}/${schedule.length}: ${scheduleItem.title}...`);
      
      try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–º–ø—Ç, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π LLM
        const audioBlob = await generateSoundEffect(
          scheduleItem.audioPrompt || `Pleasant ambient sound for ${scheduleItem.title}`,
          10, // duration
          false
        );
        
        const url = await saveSoundToFile(audioBlob, slug, soundId);
        timelineSounds.push({ id: soundId, timeSlot: scheduleItem.time, url });
        
        console.log(`    ‚úì ${scheduleItem.time} - ${scheduleItem.title}`);
        
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 2000));
      } catch (error: any) {
        console.error(`    ‚úó –û—à–∏–±–∫–∞: ${scheduleItem.time} - ${scheduleItem.title}:`, error.message);
      }
    }
    
    console.log(`    ‚úì –ó–≤—É–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã: ${timelineSounds.length} –∑–≤—É–∫–æ–≤ –¥–ª—è timeline`);
    
    return { timelineSounds };
  } catch (error: any) {
    console.error(`    ‚úó –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–≤—É–∫–æ–≤:`, error.message);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏ –¥–ª—è slug
function transliterate(text: string): string {
  const translitMap: Record<string, string> = {
    '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo', 
    '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm', 
    '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u', 
    '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch', 
    '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya'
  };
  
  return text
    .toLowerCase()
    .split('')
    .map(char => translitMap[char] || char)
    .join('')
    .replace(/\s+/g, '-')
    .replace(/[^a-z0-9\-]/g, '');
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–¥–Ω–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
async function generateOneProfession(
  prof: { name: string; level: string; company: string },
  index: number,
  total: number,
  dataDir: string
) {
  const startTime = Date.now();
  console.log(`\n[${index + 1}/${total}] üìù ${prof.name} (${prof.level} –≤ ${prof.company})`);
  console.log('‚îÄ'.repeat(60));
  
  try {
    // 1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ Gemini
    const data = await generateProfessionData(prof.name, prof.level, prof.company);
    
    // –°–æ–∑–¥–∞–µ–º slug
    const slug = transliterate(prof.name);
    
    // 2-4. –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –≤–∏–¥–µ–æ
    console.log(`  üöÄ –ó–∞–ø—É—Å–∫–∞—é –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞...`);
    const [images, vacanciesStats, videos] = await Promise.all([
      generateImages(prof.name, slug),
      fetchVacanciesStats(prof.name),
      fetchYouTubeVideos(prof.name),
    ]);
    
    // 5. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–≤—É–∫–æ–≤ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ñ–ª–∞–≥ --with-audio)
    let audioData = null;
    if (WITH_AUDIO) {
      audioData = await generateAudio(slug, data.schedule);
      
      // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∑–≤—É–∫–∏ –∫ —Å–æ–±—ã—Ç–∏—è–º schedule –ø–æ –∏–Ω–¥–µ–∫—Å—É
      if (audioData && audioData.timelineSounds) {
        data.schedule = data.schedule.map((scheduleItem: any, index: number) => {
          const sound = audioData.timelineSounds[index];
          
          if (sound) {
            return {
              ...scheduleItem,
              soundId: sound.id,
            };
          }
          
          return scheduleItem;
        });
        
        console.log(`  üéß –ü—Ä–∏–≤—è–∑–∞–ª ${audioData.timelineSounds.length} –∑–≤—É–∫–æ–≤ –∫ —Å–æ–±—ã—Ç–∏—è–º schedule`);
      }
    }
    
    // 6. –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å—ë –≤ –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç
    const fullData = {
      ...data,
      slug,
      images,
      ...vacanciesStats,
      videos,
      ...(audioData ? { audio: audioData } : {}),
      generatedAt: new Date().toISOString(),
    };

    // 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON —Ñ–∞–π–ª
    const filepath = path.join(dataDir, `${slug}.json`);
    fs.writeFileSync(filepath, JSON.stringify(fullData, null, 2), 'utf-8');
    
    const elapsed = ((Date.now() - startTime) / 1000).toFixed(1);
    console.log(`  ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: data/professions/${slug}.json (${elapsed}s)`);
    
    return { slug, profession: prof.name, success: true };
  } catch (error: any) {
    const elapsed = ((Date.now() - startTime) / 1000).toFixed(1);
    console.error(`  ‚ùå –û–®–ò–ë–ö–ê –¥–ª—è ${prof.name} –ø–æ—Å–ª–µ ${elapsed}s:`, error.message);
    return { slug: '', profession: prof.name, success: false, error: error.message };
  }
}

async function generateAll() {
  const startTime = Date.now();
  
  console.log('\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–£–Æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–æ—Ñ–µ—Å—Å–∏–π...\n');
  console.log(`–í—Å–µ–≥–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π: ${professions.length}`);
  console.log(`–†–µ–∂–∏–º: –≤—Å–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ`);
  console.log(`–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–≤—É–∫–æ–≤: ${WITH_AUDIO ? '‚úì –í–ö–õ–Æ–ß–ï–ù–ê (--with-audio)' : '‚úó –í—ã–∫–ª—é—á–µ–Ω–∞ (–¥–æ–±–∞–≤—å—Ç–µ --with-audio)'}\n`);
  
  if (!process.env.GOOGLE_API_KEY) {
    console.error('‚ùå –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω GOOGLE_API_KEY –≤ .env.local');
    console.error('   –°–æ–∑–¥–∞–π —Ñ–∞–π–ª .env.local –∏ –¥–æ–±–∞–≤—å: GOOGLE_API_KEY=—Ç–≤–æ–π_–∫–ª—é—á');
    process.exit(1);
  }
  
  const dataDir = path.join(process.cwd(), 'data', 'professions');
  if (!fs.existsSync(dataDir)) {
    fs.mkdirSync(dataDir, { recursive: true });
  }

  // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π
  const results = await Promise.allSettled(
    professions.map((prof, index) => 
      generateOneProfession(prof, index, professions.length, dataDir)
    )
  );
  
  const totalTime = ((Date.now() - startTime) / 1000).toFixed(1);
  
  console.log('\n' + '='.repeat(70));
  console.log(`üéâ –ì–ï–ù–ï–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –∑–∞ ${totalTime}s!\n`);
  
  console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
  const successfulResults = results.filter(r => r.status === 'fulfilled' && r.value.success);
  const failedResults = results.filter(r => r.status === 'rejected' || (r.status === 'fulfilled' && !r.value.success));
  
  results.forEach((result, index) => {
    if (result.status === 'fulfilled' && result.value.success) {
      console.log(`  ‚úÖ ${result.value.profession} ‚Üí data/professions/${result.value.slug}.json`);
    } else if (result.status === 'fulfilled') {
      console.log(`  ‚ùå ${result.value.profession} ‚Üí –û–®–ò–ë–ö–ê: ${result.value.error}`);
    } else {
      console.log(`  ‚ùå ${professions[index].name} ‚Üí –û–®–ò–ë–ö–ê: ${result.reason}`);
    }
  });
  
  console.log(`\n–£—Å–ø–µ—à–Ω–æ: ${successfulResults.length}/${results.length}`);
  console.log(`‚ö° –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: ${(parseFloat(totalTime) / professions.length).toFixed(1)}s –Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é`);
  
  if (successfulResults.length > 0) {
    console.log('\nüí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å: npm run dev');
    
    if (!WITH_AUDIO) {
      console.log('\nüéß –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∑–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã?');
      console.log('   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run generate -- --with-audio');
      console.log('   (–¢—Ä–µ–±—É–µ—Ç—Å—è ELEVENLABS_API_KEY –≤ .env.local)');
    }
  }
}

generateAll().catch(console.error);

