'use client';

import { useState, useEffect, useMemo, use, useRef, type ReactNode } from 'react';
import Link from 'next/link';
import Image from 'next/image';
import TimelineAudioPlayer from '@/components/TimelineAudioPlayer';
import VoiceChat from '@/components/VoiceChat';
import CareerTreeComponent from '@/components/CareerTree';
import { CareerTree } from '@/types/profession';
import { useAuth } from '@/lib/auth-context';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—É—Å–µ–ª–∏ –∫–æ–º–∏–∫—Å–∞
function ComicCarousel({ 
  comicPanels, 
  schedule, 
  slug 
}: { 
  comicPanels: string[]; 
  schedule: Array<{ time: string; title: string; emoji?: string }>; 
  slug: string;
}) {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [startX, setStartX] = useState<number | null>(null);
  const [isDragging, setIsDragging] = useState(false);
  const carouselRef = useRef<HTMLDivElement>(null);

  const handleTouchStart = (e: React.TouchEvent) => {
    setStartX(e.touches[0].clientX);
    setIsDragging(true);
  };

  const handleTouchMove = (e: React.TouchEvent) => {
    if (!isDragging || startX === null) return;
    e.preventDefault();
  };

  const handleTouchEnd = (e: React.TouchEvent) => {
    if (!isDragging || startX === null) return;
    
    const endX = e.changedTouches[0].clientX;
    const diff = startX - endX;
    const threshold = 50; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–≤–∞–π–ø–∞

    if (Math.abs(diff) > threshold) {
      if (diff > 0 && currentIndex < comicPanels.length - 1) {
        // –°–≤–∞–π–ø –≤–ª–µ–≤–æ - —Å–ª–µ–¥—É—é—â–∏–π —Å–ª–∞–π–¥
        setCurrentIndex(currentIndex + 1);
      } else if (diff < 0 && currentIndex > 0) {
        // –°–≤–∞–π–ø –≤–ø—Ä–∞–≤–æ - –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ª–∞–π–¥
        setCurrentIndex(currentIndex - 1);
      }
    }

    setIsDragging(false);
    setStartX(null);
  };

  const handleMouseDown = (e: React.MouseEvent) => {
    setStartX(e.clientX);
    setIsDragging(true);
  };

  const handleMouseMove = (e: React.MouseEvent) => {
    if (!isDragging || startX === null) return;
    e.preventDefault();
  };

  const handleMouseUp = (e: React.MouseEvent) => {
    if (!isDragging || startX === null) return;
    
    const endX = e.clientX;
    const diff = startX - endX;
    const threshold = 50;

    if (Math.abs(diff) > threshold) {
      if (diff > 0 && currentIndex < comicPanels.length - 1) {
        setCurrentIndex(currentIndex + 1);
      } else if (diff < 0 && currentIndex > 0) {
        setCurrentIndex(currentIndex - 1);
      }
    }

    setIsDragging(false);
    setStartX(null);
  };

  const goToSlide = (index: number) => {
    setCurrentIndex(index);
  };

  return (
    <div className="w-full">
      <div className="mb-4 flex items-center justify-between">
        <div>
          <h3 className="text-base font-semibold text-text-primary">–ñ–∏–≤–æ–π –î–µ–Ω—å –≤ –ö–æ–º–∏–∫—Å–µ</h3>
          <p className="mt-1 text-xs text-text-secondary">
            –ü–∞–Ω–µ–ª—å {currentIndex + 1} –∏–∑ {comicPanels.length}
          </p>
        </div>
        <div className="flex items-center gap-2">
          {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã */}
          <div className="flex items-center gap-1.5">
            {comicPanels.map((_, index) => (
              <button
                key={index}
                onClick={() => goToSlide(index)}
                className={`h-2 rounded-full transition-all ${
                  index === currentIndex
                    ? 'w-6 bg-hh-red'
                    : 'w-2 bg-hh-gray-300 hover:bg-hh-gray-400'
                }`}
                aria-label={`–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–∞–Ω–µ–ª–∏ ${index + 1}`}
              />
            ))}
          </div>
        </div>
      </div>

      {/* –ö–∞—Ä—É—Å–µ–ª—å */}
      <div 
        ref={carouselRef}
        className="relative overflow-hidden rounded-2xl border border-hh-gray-200 bg-white"
        onTouchStart={handleTouchStart}
        onTouchMove={handleTouchMove}
        onTouchEnd={handleTouchEnd}
        onMouseDown={handleMouseDown}
        onMouseMove={handleMouseMove}
        onMouseUp={handleMouseUp}
        onMouseLeave={() => {
          setIsDragging(false);
          setStartX(null);
        }}
      >
        {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–∞–Ω–µ–ª–µ–π */}
        <div
          className="flex transition-transform duration-300 ease-out"
          style={{
            transform: `translateX(-${currentIndex * 100}%)`,
          }}
        >
          {comicPanels.map((panelUrl, index) => {
            const scheduleItem = schedule[index];
            return (
              <div
                key={`comic-panel-${index}`}
                className="min-w-full flex-shrink-0"
              >
                {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞–Ω–µ–ª–∏ */}
                {scheduleItem && (
                  <div className="border-b border-hh-gray-100 bg-hh-gray-50 px-4 py-3">
                    <div className="flex items-center gap-3">
                      <span className="text-2xl">{scheduleItem.emoji}</span>
                      <div className="flex-1">
                        <p className="font-mono text-xs font-semibold uppercase tracking-wider text-text-secondary">
                          {scheduleItem.time}
                        </p>
                        <h4 className="mt-0.5 text-sm font-semibold text-text-primary">
                          {scheduleItem.title}
                        </h4>
                      </div>
                    </div>
                  </div>
                )}
                {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ */}
                <div className="relative aspect-video w-full overflow-hidden bg-hh-gray-50">
                  <Image
                    src={panelUrl}
                    alt={scheduleItem ? `–ö–æ–º–∏–∫—Å: ${scheduleItem.title}` : `–ü–∞–Ω–µ–ª—å –∫–æ–º–∏–∫—Å–∞ ${index + 1}`}
                    fill
                    className="object-cover"
                    sizes="(max-width: 768px) 100vw, (max-width: 1200px) 90vw, 80vw"
                    priority={index === currentIndex}
                  />
                </div>
              </div>
            );
          })}
        </div>

        {/* –°—Ç—Ä–µ–ª–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ */}
        {comicPanels.length > 1 && (
          <>
            {currentIndex > 0 && (
              <button
                onClick={() => setCurrentIndex(currentIndex - 1)}
                className="absolute left-4 top-1/2 -translate-y-1/2 rounded-full bg-white/90 p-2 shadow-lg transition hover:bg-white"
                aria-label="–ü—Ä–µ–¥—ã–¥—É—â–∞—è –ø–∞–Ω–µ–ª—å"
              >
                <svg className="h-6 w-6 text-text-primary" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                </svg>
              </button>
            )}
            {currentIndex < comicPanels.length - 1 && (
              <button
                onClick={() => setCurrentIndex(currentIndex + 1)}
                className="absolute right-4 top-1/2 -translate-y-1/2 rounded-full bg-white/90 p-2 shadow-lg transition hover:bg-white"
                aria-label="–°–ª–µ–¥—É—é—â–∞—è –ø–∞–Ω–µ–ª—å"
              >
                <svg className="h-6 w-6 text-text-primary" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                </svg>
              </button>
            )}
          </>
        )}
      </div>

      {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è —Å–≤–∞–π–ø–∞ */}
      {comicPanels.length > 1 && (
        <p className="mt-2 text-center text-xs text-text-secondary">
          üëÜ –ü—Ä–æ–≤–µ–¥–∏—Ç–µ –ø–∞–ª—å—Ü–µ–º –∏–ª–∏ –º—ã—à—å—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        </p>
      )}
    </div>
  );
}

const tabs = [
  { id: 'overview', label: '–û–±–∑–æ—Ä', emoji: 'üëÄ' },
  { id: 'schedule', label: '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', emoji: 'üìÖ' },
  { id: 'skills', label: '–ù–∞–≤—ã–∫–∏', emoji: 'üéØ' },
  { id: 'career', label: '–ö–∞—Ä—å–µ—Ä–∞', emoji: 'üìà' },
];

type ProfessionData = {
  profession: string;
  level?: string;
  company?: string;
  displayLabels?: {
    level?: string;
    stack?: string;
    skills?: string;
    schedule?: string;
    careerPath?: string;
  };
  images?: string[];
  comicStrip?: string[]; // –ü–∞–Ω–µ–ª–∏ –∫–æ–º–∏–∫—Å–∞ "–ñ–∏–≤–æ–π –î–µ–Ω—å –≤ –ö–æ–º–∏–∫—Å–µ"
  benefits?: { icon: string; text: string }[];
  dialog?: { message: string; options?: string[]; response: string };
  schedule?: { time: string; title: string; description: string; detail?: string; emoji?: string; soundId?: string }[];
  stack?: string[];
  skills?: { name: string; level: number }[];
  careerPath?: { level: string; years: string; salary: string }[];
  careerTree?: CareerTree;
  avgSalary?: number;
  vacancies?: number;
  competition?: string;
  topCompanies?: string[];
  videos?: { videoId: string; title: string; thumbnail: string; channelTitle: string }[];
  generatedAt?: string;
  isIT?: boolean;
};

export default function ProfessionPage({ params }: { params: Promise<{ id: string }> }) {
  const { id } = use(params);
  const [data, setData] = useState<ProfessionData | null>(null);
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState<string>('overview');
  const [selectedTime, setSelectedTime] = useState<number | null>(null);
  const [dialogAnswer, setDialogAnswer] = useState<string | null>(null);
  const [soundPlaying, setSoundPlaying] = useState(false);
  const [activeVideo, setActiveVideo] = useState(0);
  const [isVideoOverlayOpen, setVideoOverlayOpen] = useState(false);
  const [isFavorite, setIsFavorite] = useState(false);
  const [showShareToast, setShowShareToast] = useState(false);
  const { user } = useAuth();

  const getStorageKey = () => {
    return user?.id ? `favoriteProfessions_${user.id}` : 'favoriteProfessions';
  };

  useEffect(() => {
    fetch(`/api/profession/${id}`)
      .then((response) => response.json())
      .then((payload) => {
        setData(payload);
        setActiveVideo(0);
        setLoading(false);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
        const favorites = JSON.parse(localStorage.getItem(getStorageKey()) || '[]');
        setIsFavorite(favorites.includes(id));
      })
      .catch((error) => {
        console.error('Error loading profession:', error);
        setLoading(false);
      });
  }, [id, user?.id]);

  useEffect(() => {
    if (isVideoOverlayOpen) {
      const original = document.body.style.overflow;
      document.body.style.overflow = 'hidden';
      return () => {
        document.body.style.overflow = original;
      };
    }
    return undefined;
  }, [isVideoOverlayOpen]);

  const heroImage = useMemo(() => {
    if (data?.images && data.images.length > 0) {
      return data.images[0];
    }
    return '/generated/image-1.png';
  }, [data]);

  const handleTabClick = (tabId: string) => {
    setActiveTab(tabId);
    const target = document.getElementById(tabId);
    if (target) {
      target.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }
  };

  const vibeLabels = ['–£—Ç—Ä–æ –≤ –æ—Ñ–∏—Å–µ ‚òÄÔ∏è', '–§–æ–∫—É—Å & –ö–æ–¥ üíª', '–ö–æ–º–∞–Ω–¥–Ω—ã–π –≤–∞–π–± ü§ù', '–ò–Ω—Å–∞–π—Ç—ã –∏ –æ–±—É—á–µ–Ω–∏–µ ‚ú®', 'Afterwork chill üéß'];

  const currentVideo = useMemo(() => {
    if (!data?.videos || data.videos.length === 0) {
      return null;
    }
    const safeIndex = activeVideo >= 0 && activeVideo < data.videos.length ? activeVideo : 0;
    return data.videos[safeIndex];
  }, [data, activeVideo]);

  const openVideo = (index: number) => {
    setActiveVideo(index);
    setVideoOverlayOpen(true);
  };

  const closeVideo = () => {
    setVideoOverlayOpen(false);
  };

  const toggleFavorite = () => {
    const favorites = JSON.parse(localStorage.getItem(getStorageKey()) || '[]');
    
    if (isFavorite) {
      // –£–¥–∞–ª—è–µ–º –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
      const newFavorites = favorites.filter((fav: string) => fav !== id);
      localStorage.setItem(getStorageKey(), JSON.stringify(newFavorites));
      setIsFavorite(false);
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
      favorites.push(id);
      localStorage.setItem(getStorageKey(), JSON.stringify(favorites));
      setIsFavorite(true);
    }
  };

  const handleShare = async () => {
    const shareUrl = `${window.location.origin}/profession/${id}`;
    
    // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Web Share API –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    if (navigator.share) {
      try {
        await navigator.share({
          title: data?.profession || '–ü—Ä–æ—Ñ–µ—Å—Å–∏—è',
          text: `–ü–æ—Å–º–æ—Ç—Ä–∏ –≤–∞–π–± –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ ${data?.profession || ''}!`,
          url: shareUrl,
        });
        return;
      } catch (error) {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª —à–∞—Ä–∏–Ω–≥, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        if ((error as Error).name === 'AbortError') return;
      }
    }
    
    // Fallback: –∫–æ–ø–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
    try {
      await navigator.clipboard.writeText(shareUrl);
      setShowShareToast(true);
      setTimeout(() => setShowShareToast(false), 3000);
    } catch (error) {
      console.error('Failed to copy link:', error);
    }
  };

  const handleDownloadPDF = async () => {
    try {
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º HTML-–≤–µ—Ä—Å–∏—é –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ –¥–ª—è –ø–µ—á–∞—Ç–∏ –≤ PDF
      const response = await fetch(`/api/profession/${id}/pdf`);
      if (response.status === 501) {
        // PDF –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º window.print()
        window.print();
      } else {
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `${data?.profession || 'profession'}.pdf`;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);
      }
    } catch (error) {
      console.error('PDF download error:', error);
      // Fallback: –æ—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–µ—á–∞—Ç–∏ –±—Ä–∞—É–∑–µ—Ä–∞
      window.print();
    }
  };

  if (loading) {
    return (
      <div className="flex min-h-dvh items-center justify-center bg-hh-gray-50">
        <div className="flex flex-col items-center gap-4 text-center">
          <span className="text-5xl">‚è≥</span>
          <p className="text-base font-medium text-text-secondary">–ó–∞–≥—Ä—É–∂–∞–µ–º –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏...</p>
        </div>
      </div>
    );
  }

  if (!data) {
    return (
      <div className="flex min-h-dvh flex-col items-center justify-center gap-6 bg-hh-gray-50 px-6 text-center">
        <div className="text-6xl">üòï</div>
        <div>
          <h1 className="text-2xl font-semibold text-text-primary">–ú—ã –Ω–µ –Ω–∞—à–ª–∏ —Ç–∞–∫—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é</h1>
          <p className="mt-2 text-sm text-text-secondary">–ü–æ–ø—Ä–æ–±—É–π –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∏–ª–∏ —Å–ø—Ä–æ—Å–∏ AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π.</p>
        </div>
        <Link
          href="/"
          className="rounded-xl bg-hh-red px-6 py-3 text-sm font-medium text-white shadow-[0_15px_30px_rgba(255,0,0,0.25)] transition hover:bg-hh-red-dark"
        >
          ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
        </Link>
      </div>
    );
  }

  return (
    <div className="relative min-h-dvh bg-hh-light">
      <header className="relative h-[360px] overflow-hidden">
        <div className="absolute inset-0">
          <Image src={heroImage} alt={data.profession} fill priority sizes="100vw" className="object-cover" />
          <div className="hh-gradient-overlay absolute inset-0" />
        </div>

        <div className="relative z-10 mx-auto flex h-full max-w-5xl flex-col justify-between px-4 py-6 text-white sm:px-6">
          <div className="flex items-center justify-between">
            <Link
              href="/"
              className="flex h-10 w-10 items-center justify-center rounded-full border border-white/40 bg-white/20 text-base font-semibold backdrop-blur-md"
              aria-label="–ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º"
            >
              ‚Üê
            </Link>
          </div>

          <div className="space-y-3">
            {(data.level || data.company) && (
              <span className="inline-flex items-center gap-2 rounded-full bg-white/15 px-3 py-1 text-xs font-medium uppercase tracking-wide backdrop-blur-md">
                {data.level ?? '–£—Ä–æ–≤–µ–Ω—å –Ω–µ —É–∫–∞–∑–∞–Ω'}
                {data.company && (
                  <>
                    <span className="text-white/70">‚Ä¢</span>
                    {data.company}
                  </>
                )}
              </span>
            )}
            <h1 className="text-[clamp(2rem,4vw,3rem)] font-bold leading-tight">{data.profession}</h1>
            <p className="max-w-xl text-sm text-white/80">
              –ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã —É–∂–µ –≤ –∫–æ–º–∞–Ω–¥–µ: –º—ã —Å–æ–±—Ä–∞–ª–∏ {data.displayLabels?.schedule?.toLowerCase() || '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–Ω—è'}, {data.displayLabels?.stack?.toLowerCase() || '—Å—Ç–µ–∫'}, –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∏ –∫–∞—Ä—å–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞
              –¥–∞–Ω–Ω—ã—Ö hh.ru –∏ –æ–ø—ã—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤.
            </p>

            <div className="flex flex-wrap gap-3 text-sm">
              <StatsPill label="–í–∞–∫–∞–Ω—Å–∏–π" value={data.vacancies?.toLocaleString('ru-RU') ?? '‚Äî'} icon="üìä" />
              <StatsPill
                label="–°—Ä–µ–¥–Ω—è—è –ó–ü"
                value={data.avgSalary ? `${data.avgSalary.toLocaleString('ru-RU')} ‚ÇΩ` : '‚Äî'}
                icon="üí∏"
              />
              <StatsPill label="–ö–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è" value={data.competition ?? '–°—Ä–µ–¥–Ω—è—è'} icon="‚öñÔ∏è" />
            </div>
          </div>
        </div>
      </header>

      <div className="relative z-20 -mt-12 rounded-t-3xl bg-hh-light">
        <div className="sticky top-0 z-30 -mx-4 border-b border-hh-gray-200 bg-hh-light/95 px-4 pb-2 pt-4 backdrop-blur-sm sm:-mx-6 sm:px-6">
          <nav className="flex gap-2 overflow-x-auto">
            {tabs.map((tab) => (
              <button
                key={tab.id}
                onClick={() => handleTabClick(tab.id)}
                className={`flex shrink-0 items-center gap-2 rounded-full px-4 py-2 text-sm font-medium transition-colors ${
                  activeTab === tab.id
                    ? 'bg-hh-red text-white shadow-[0_10px_20px_rgba(255,0,0,0.25)]'
                    : 'bg-hh-gray-50 text-text-secondary hover:bg-hh-gray-100'
                }`}
              >
                <span>{tab.emoji}</span>
                {tab.label}
              </button>
            ))}
          </nav>
        </div>

        <main className="mx-auto flex max-w-5xl flex-col gap-8 px-4 pb-28 pt-6 sm:px-6">
          <section id="overview" className="scroll-mt-28 space-y-6">
            <ContentCard title="–í–∏–∑—É–∞–ª—å–Ω—ã–π –≤–∞–π–±" subtitle="–ü–æ–≥—Ä—É–∑–∏—Å—å –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–µ" padding="p-4 sm:p-6">
              <div className="grid grid-cols-2 gap-2 sm:grid-cols-4">
                {data.images?.map((image, index) => (
                  <div key={`${image}-${index}`} className="group relative aspect-square overflow-hidden rounded-2xl bg-hh-gray-100">
                    <Image
                      src={image}
                      alt={`${data.profession} mood ${index + 1}`}
                      fill
                      sizes="(max-width: 640px) 50vw, 25vw"
                      className="object-cover transition-transform duration-500 group-hover:scale-105"
                    />
                  </div>
                ))}
              </div>
            </ContentCard>

            <ContentCard title="–ß—Ç–æ —Ç–µ–±—è –∂–¥—ë—Ç" subtitle="–ë—ã—Å—Ç—Ä—ã–π –æ–±–∑–æ—Ä" padding="p-4 sm:p-6">
              <div className="grid gap-4 sm:grid-cols-3">
                {data.benefits?.slice(0, 3).map((benefit, index) => (
                  <div key={`${benefit.text}-${index}`} className="rounded-2xl border border-hh-gray-200 bg-hh-gray-50 p-4">
                    <div className="text-2xl">{benefit.icon}</div>
                    <p className="mt-3 text-sm text-text-secondary">{benefit.text}</p>
                  </div>
                ))}
              </div>
            </ContentCard>

            {data.dialog && (
              <ContentCard title="–î–∏–∞–ª–æ–≥ —Å –∫–æ–ª–ª–µ–≥–æ–π" subtitle="–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ" padding="p-4 sm:p-6">
                <div className="rounded-2xl border border-hh-gray-200 bg-hh-gray-50 p-4 text-sm text-text-primary">
                  {data.dialog.message}
                </div>
                <div className="mt-4 space-y-2">
                  {dialogAnswer ? (
                    <div className="space-y-3">
                      <div className="rounded-2xl bg-hh-blue/10 p-3 text-sm text-hh-blue">
                        <span className="font-medium">–¢—ã:</span> {dialogAnswer}
                      </div>
                      <div className="rounded-2xl border border-[#00a85433] bg-[#00a8541a] p-3 text-sm text-[#008246]">
                        {data.dialog.response}
                      </div>
                      <button
                        onClick={() => setDialogAnswer(null)}
                        className="text-sm font-medium text-hh-blue hover:text-hh-red"
                      >
                        ‚Ü∫ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –æ—Ç–≤–µ—Ç
                      </button>
                    </div>
                  ) : (
                    <>
                      <p className="text-xs uppercase tracking-wide text-text-secondary">–í—ã–±–µ—Ä–∏ –æ—Ç–≤–µ—Ç</p>
                      {data.dialog.options?.map((option) => (
                        <button
                          key={option}
                          onClick={() => setDialogAnswer(option)}
                          className="w-full rounded-2xl border border-hh-gray-200 bg-white px-4 py-3 text-left text-sm font-medium text-text-primary transition hover:border-hh-red hover:text-hh-red"
                        >
                          {option}
                        </button>
                      ))}
                    </>
                  )}
                </div>
              </ContentCard>
            )}
          </section>

          <section id="schedule" className="scroll-mt-28 space-y-4">
            <ContentCard 
              title={data.displayLabels?.schedule || "–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã"} 
              padding="p-4 sm:p-6"
            >
              <div className="space-y-6">
                {/* –ë–ª–æ–∫ –∫–æ–º–∏–∫—Å–∞ —Å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—É—Å–µ–ª—å—é */}
                {data.comicStrip && data.comicStrip.length > 0 && (
                  <ComicCarousel 
                    comicPanels={data.comicStrip} 
                    schedule={data.schedule || []}
                    slug={id}
                  />
                )}

                {/* –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã */}
                <div className="space-y-5">
                  {data.schedule?.map((item, index) => {
                    const isOpen = selectedTime === index;
                    return (
                      <div key={`${item.time}-${index}`} className="w-full">
                        <div className="flex items-start gap-4 rounded-2xl border border-hh-gray-200 bg-white px-4 py-3 transition hover:border-hh-red">
                          <span className="text-3xl">{item.emoji}</span>
                          <div className="flex-1">
                            <div className="flex items-center justify-between gap-4">
                              <button 
                                onClick={() => setSelectedTime(isOpen ? null : index)} 
                                className="flex-1 text-left"
                              >
                                <p className="font-mono text-xs font-semibold uppercase tracking-wider text-text-secondary">
                                  {item.time}
                                </p>
                                <h3 className="mt-1 text-base font-semibold text-text-primary">{item.title}</h3>
                              </button>
                              <div className="flex items-center gap-2">
                                {/* –ê—É–¥–∏–æ –ø–ª–µ–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ —ç—Ç–∞–ø–∞ –¥–Ω—è */}
                                {item.soundId && (
                                  <TimelineAudioPlayer 
                                    slug={id} 
                                    soundId={item.soundId}
                                  />
                                )}
                                <button
                                  onClick={() => setSelectedTime(isOpen ? null : index)}
                                  className="text-xl text-text-secondary hover:text-hh-red"
                                >
                                  {isOpen ? '‚ñ≤' : '‚ñº'}
                                </button>
                              </div>
                            </div>
                            <p className="mt-2 text-sm text-text-secondary">{item.description}</p>
                            {isOpen && item.detail && (
                              <p className="mt-3 rounded-2xl bg-hh-gray-50 p-3 text-sm text-text-primary">{item.detail}</p>
                            )}
                          </div>
                        </div>
                      </div>
                    );
                  })}
                </div>
              </div>
            </ContentCard>
          </section>

          <section id="skills" className="scroll-mt-28 space-y-4">
            <ContentCard title={data.displayLabels?.skills || "–ù–∞–≤—ã–∫–∏"} subtitle="–ß—Ç–æ —Å—Ç–æ–∏—Ç –ø–æ–¥—Ç—è–Ω—É—Ç—å" padding="p-4 sm:p-6">
              <div className="space-y-6">
                {data.stack && data.stack.length > 0 && (
                  <div>
                    <h3 className="text-sm font-semibold uppercase tracking-wide text-text-secondary">
                      {data.displayLabels?.stack || "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å—Ç–µ–∫"}
                    </h3>
                    <div className="mt-3 flex flex-wrap gap-2">
                      {data.stack.map((tech) => (
                        <span key={tech} className="inline-flex items-center rounded-full bg-hh-gray-100 px-4 py-1.5 text-xs font-medium text-text-primary">
                          {tech}
                        </span>
                      ))}
                    </div>
                  </div>
                )}

                {data.skills && (
                  <div className="space-y-4">
                    {data.skills.map((skill) => (
                      <div key={skill.name}>
                        <div className="flex items-center justify-between text-sm font-medium text-text-primary">
                          <span>{skill.name}</span>
                          <span className="text-hh-red">{skill.level}%</span>
                        </div>
                        <div className="mt-2 h-2 rounded-full bg-hh-gray-100">
                          <div
                            className="h-full rounded-full bg-hh-red transition-all duration-700"
                            style={{ width: `${skill.level}%` }}
                          />
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            </ContentCard>
          </section>

          <section id="career" className="scroll-mt-28 space-y-4">
            <ContentCard title={data.displayLabels?.careerPath || "–ö–∞—Ä—å–µ—Ä–Ω—ã–π –ø—É—Ç—å"} subtitle="–ö–∞–∫ –±—É–¥–µ—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è —Ç–≤–æ–π –≤–∞–π–±" padding="p-4 sm:p-6">
              {data.careerTree ? (
                // –ù–æ–≤–∞—è –¥—Ä–µ–≤–æ–≤–∏–¥–Ω–∞—è roadmap –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–≤—ã–∫–æ–≤
                <CareerTreeComponent careerTree={data.careerTree} />
              ) : data.careerPath ? (
                // –°—Ç–∞—Ä–∞—è –ª–∏–Ω–µ–π–Ω–∞—è roadmap (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
                <div className="relative">
                  <div className="absolute left-4 top-10 bottom-10 w-px bg-hh-gray-200 md:left-1/2 md:-translate-x-1/2" />
                  <div className="flex flex-col gap-6 md:grid md:grid-cols-2">
                    {data.careerPath.map((stage, index) => (
                      <div key={`${stage.level}-${index}`} className="relative pl-12 md:pl-0">
                        <div className="absolute left-0 top-3 flex h-8 w-8 items-center justify-center rounded-full border-4 border-white bg-hh-red text-sm font-semibold text-white md:left-1/2 md:-translate-x-1/2">
                          {index + 1}
                        </div>
                        <div className="mt-6 rounded-2xl border border-hh-gray-200 bg-white p-4 shadow-sm">
                          <p className="text-xs uppercase tracking-wide text-hh-red">{stage.years}</p>
                          <h3 className="mt-2 text-base font-semibold text-text-primary">{stage.level}</h3>
                          <p className="mt-2 text-sm text-text-secondary">{stage.salary}</p>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              ) : (
                <p className="text-text-secondary">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ä—å–µ—Ä–Ω–æ–º –ø—É—Ç–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</p>
              )}
            </ContentCard>

            {(data.avgSalary || data.topCompanies?.length) && (
              <ContentCard title="–†—ã–Ω–æ–∫ —Ç—Ä—É–¥–∞" subtitle="–î–∞–Ω–Ω—ã–µ hh.ru" padding="p-4 sm:p-6">
                <div className="grid gap-4 sm:grid-cols-3">
                  <StatsTile
                    label="–í–∞–∫–∞–Ω—Å–∏–π"
                    value={data.vacancies?.toLocaleString('ru-RU') ?? '‚Äî'}
                    description="–ø–æ –¥–∞–Ω–Ω—ã–º API hh.ru"
                    tone="default"
                  />
                  <StatsTile
                    label="–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞"
                    value={data.avgSalary ? `${data.avgSalary.toLocaleString('ru-RU')} ‚ÇΩ` : '‚Äî'}
                    description="–¥–æ –≤—ã—á–µ—Ç–∞ –Ω–∞–ª–æ–≥–æ–≤"
                    tone="success"
                  />
                  <StatsTile
                    label="–ö–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è"
                    value={data.competition ?? '–°—Ä–µ–¥–Ω—è—è'}
                    description="–ø–æ —É—Ä–æ–≤–Ω—é –æ—Ç–∫–ª–∏–∫–æ–≤"
                    tone="warning"
                  />
                </div>
                {data.topCompanies && data.topCompanies.length > 0 && (
                  <div className="mt-5">
                    <h4 className="text-sm font-semibold uppercase tracking-wide text-text-secondary">–¢–æ–ø —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π</h4>
                    <div className="mt-2 flex flex-wrap gap-2">
                      {data.topCompanies.map((company) => (
                        <span
                          key={company}
                          className="rounded-full border border-hh-gray-200 bg-white px-3 py-1 text-xs font-medium text-text-primary"
                        >
                          {company}
                        </span>
                      ))}
                    </div>
                  </div>
                )}
              </ContentCard>
            )}
          </section>

          {currentVideo && data.videos && data.videos.length > 0 && (
            <ContentCard title="–í–∏–¥–µ–æ –∏–∑ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏" subtitle="–ü–æ–≥—Ä—É–∑–∏—Å—å –≤ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞" padding="p-4">
              <div className="space-y-4">
                <button
                  type="button"
                  onClick={() => openVideo(activeVideo)}
                  className="relative flex w-full overflow-hidden rounded-3xl bg-black text-left shadow-[0_20px_40px_rgba(0,0,0,0.25)]"
                >
                  <div className="relative w-full overflow-hidden aspect-[9/16]">
                    <img src={currentVideo.thumbnail} alt={currentVideo.title} className="absolute inset-0 h-full w-full object-cover opacity-70" />
                    <div className="absolute inset-0 bg-gradient-to-b from-black/50 via-black/20 to-black/70" />
                    <div className="absolute inset-x-4 bottom-4 flex flex-col gap-2 text-white">
                      <span className="inline-flex w-fit items-center gap-2 rounded-full bg-white/20 px-3 py-1 text-xs font-semibold">
                        üéß {vibeLabels[activeVideo % vibeLabels.length]}
                      </span>
                      <h3 className="text-base font-semibold leading-tight">{currentVideo.title}</h3>
                      <span className="text-xs text-white/70">{currentVideo.channelTitle}</span>
                    </div>
                    <span className="absolute left-1/2 top-1/2 flex h-14 w-14 -translate-x-1/2 -translate-y-1/2 items-center justify-center rounded-full bg-white text-2xl text-hh-red">
                      ‚ñ∂
                    </span>
                  </div>
                </button>

                <div>
                  <div className="flex items-center justify-between">
                    <p className="text-xs font-semibold uppercase tracking-wide text-text-secondary">–í—ã–±–µ—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ</p>
                    <span className="text-xs text-text-secondary">{activeVideo + 1} / {data.videos.length}</span>
                  </div>
                  <div className="mt-4 flex gap-3 overflow-x-auto pb-1">
                    {data.videos.map((video, index) => {
                      const isActive = index === activeVideo;
                      return (
                        <button
                          key={video.videoId}
                          type="button"
                          onClick={() => setActiveVideo(index)}
                          className={`flex w-48 flex-col overflow-hidden rounded-2xl border bg-white text-left transition ${
                            isActive ? 'border-hh-red shadow-[0_15px_30px_rgba(255,0,0,0.2)]' : 'border-hh-gray-200'
                          }`}
                        >
                          <div className="relative aspect-[9/16] w-full overflow-hidden">
                            <img src={video.thumbnail} alt={video.title} className="h-full w-full object-cover" />
                            <span className="absolute left-2 top-2 rounded-full bg-black/65 px-2 py-1 text-[11px] font-medium text-white">
                              {vibeLabels[index % vibeLabels.length]}
                            </span>
                            {isActive && (
                              <span className="absolute right-2 top-2 flex h-7 w-7 items-center justify-center rounded-full bg-hh-red text-xs font-semibold text-white">
                                ‚ñ∂
                              </span>
                            )}
                          </div>
                          <div className="flex flex-1 flex-col gap-1 px-3 py-3">
                            <p className="line-clamp-2 text-sm font-semibold text-text-primary">{video.title}</p>
                            <span className="text-xs text-text-secondary">{video.channelTitle}</span>
                          </div>
                        </button>
                      );
                    })}
                  </div>
                </div>
              </div>
            </ContentCard>
          )}

          <footer className="flex flex-col items-center gap-3 pb-10 text-center text-xs text-text-secondary">
            <div className="flex flex-wrap justify-center gap-3">
              <Link
                href="/"
                className="rounded-full border border-hh-gray-200 px-4 py-2 text-sm font-medium text-text-primary transition hover:border-hh-red hover:text-hh-red"
              >
                ‚Üê –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é
              </Link>
              <button
                onClick={toggleFavorite}
                className={`rounded-full border px-4 py-2 text-sm font-medium transition ${
                  isFavorite
                    ? 'border-hh-red bg-hh-red text-white hover:bg-hh-red-dark'
                    : 'border-hh-gray-200 text-text-primary hover:border-hh-red hover:text-hh-red'
                }`}
              >
                {isFavorite ? '‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º' : '‚òÜ –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ'}
              </button>
              <button
                onClick={handleShare}
                className="rounded-full border border-hh-gray-200 px-4 py-2 text-sm font-medium text-text-primary transition hover:border-hh-red hover:text-hh-red"
              >
                üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è
              </button>
              <button
                onClick={handleDownloadPDF}
                className="rounded-full bg-hh-red px-6 py-2 text-sm font-medium text-white shadow-[0_10px_25px_rgba(255,0,0,0.25)] transition hover:bg-hh-red-dark"
              >
                üì• –°–∫–∞—á–∞—Ç—å PDF –∫–∞—Ä—Ç–æ—á–∫—É
              </button>
            </div>
            {data.generatedAt && <p>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {new Date(data.generatedAt).toLocaleString('ru-RU')}</p>}
          </footer>
        </main>
      </div>

      <div className="fixed inset-x-0 bottom-0 z-40 bg-white/95 px-4 py-4 shadow-[0_-10px_30px_rgba(0,0,0,0.08)] backdrop-blur-sm safe-area-inset-bottom sm:hidden">
        <div className="mx-auto flex max-w-5xl items-center gap-3">
          <div className="flex-1">
            <p className="text-xs uppercase tracking-wide text-text-secondary">–ì–æ—Ç–æ–≤ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å?</p>
            <p className="text-sm font-semibold text-text-primary">–°–ø—Ä–æ—Å–∏ —É AI –æ –ø–æ—Ö–æ–∂–∏—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏—è—Ö</p>
          </div>
          <Link
            href="/"
            className="flex h-12 w-12 items-center justify-center rounded-full bg-hh-red text-lg text-white"
            aria-label="–ù–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é"
          >
            üí¨
          </Link>
        </div>
      </div>
      {isVideoOverlayOpen && currentVideo && (
        <VideoOverlay video={currentVideo} onClose={closeVideo} />
      )}
      
      {showShareToast && (
        <div className="fixed bottom-24 left-1/2 z-50 -translate-x-1/2 transform animate-fade-in-up rounded-full bg-[#00a854] px-6 py-3 text-sm font-medium text-white shadow-lg">
          ‚úÖ –°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!
        </div>
      )}
      
      <VoiceChat 
        professionName={data.profession}
        professionData={{
          level: data.level,
          company: data.company,
          schedule: data.schedule,
          skills: data.skills,
          benefits: data.benefits,
        }}
      />
    </div>
  );
}

function ContentCard({ title, subtitle, padding, children }: { title: string; subtitle?: string; padding?: string; children: ReactNode }) {
  return (
    <section className={`rounded-3xl border border-hh-gray-200 bg-white shadow-sm ${padding ?? 'p-6'}`}>
      <header className="mb-4 flex flex-col gap-1">
        <h2 className="text-lg font-semibold text-text-primary sm:text-xl">{title}</h2>
        {subtitle && <p className="text-sm text-text-secondary">{subtitle}</p>}
      </header>
      <div className="space-y-4">{children}</div>
    </section>
  );
}

function StatsPill({ label, value, icon }: { label: string; value: string; icon: string }) {
  return (
    <span className="inline-flex items-center gap-2 rounded-full bg-white/20 px-4 py-2 text-xs font-medium backdrop-blur-md">
      <span>{icon}</span>
      <span>{label}:</span>
      <span className="font-semibold">{value}</span>
    </span>
  );
}

function StatsTile({
  label,
  value,
  description,
  tone,
}: {
  label: string;
  value: string;
  description: string;
  tone: 'success' | 'warning' | 'default';
}) {
  const toneStyles = {
    success: 'border-[#00a85433] text-[#008246] bg-[#00a8541a]',
    warning: 'border-[#ffa50033] text-[#c67600] bg-[#ffa5001a]',
    default: 'border-hh-gray-200 text-text-primary bg-hh-gray-50',
  }[tone];

  return (
    <div className="rounded-2xl border border-hh-gray-200 bg-white p-4 text-sm shadow-sm">
      <p className="text-xs uppercase tracking-wide text-text-secondary">{label}</p>
      <div className={`mt-2 inline-flex items-center gap-2 rounded-full px-3 py-1 text-sm font-semibold ${toneStyles}`}>
        {value}
      </div>
      <p className="mt-2 text-xs text-text-secondary">{description}</p>
    </div>
  );
}

function VideoOverlay({ video, onClose }: { video: { videoId: string; title: string; channelTitle: string }; onClose: () => void }) {
  return (
    <div className="fixed inset-0 z-50 flex flex-col bg-black">
      <div className="flex items-center justify-between px-4 pt-4 pb-2 text-white safe-area-inset-top">
        <button
          onClick={onClose}
          aria-label="–ó–∞–∫—Ä—ã—Ç—å –≤–∏–¥–µ–æ"
          className="flex h-10 w-10 items-center justify-center rounded-full bg-white/10 text-2xl"
        >
          √ó
        </button>
        <div className="flex flex-col text-right">
          <span className="text-xs text-white/60">–°–µ–π—á–∞—Å —Å–º–æ—Ç—Ä–∏—à—å</span>
          <span className="text-sm font-semibold">{video.title}</span>
        </div>
      </div>
      <div className="flex flex-1 justify-center pb-6">
        <div className="relative w-full max-w-sm aspect-[9/16]">
          <iframe
            src={`https://www.youtube.com/embed/${video.videoId}?autoplay=1`}
            allow="autoplay; encrypted-media"
            allowFullScreen
            className="absolute inset-0 h-full w-full rounded-2xl"
            title={video.title}
          />
        </div>
      </div>
    </div>
  );
}