import { NextRequest } from 'next/server';
import { generateCard, generateBaseCard, transliterate, getCachedCard } from '@/lib/card-generator';
import { logger } from '@/lib/logger';

// –Ø–≤–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è API routes
// Next.js –¥–æ–ª–∂–µ–Ω –∑–∞–≥—Ä—É–∂–∞—Ç—å –∏—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –Ω–æ –∏–Ω–æ–≥–¥–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è —è–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
if (typeof window === 'undefined') {
  try {
    const dotenv = require('dotenv');
    const path = require('path');
    dotenv.config({ path: path.join(process.cwd(), '.env.local') });
  } catch (e) {
    // dotenv –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è Next.js
    console.log('Note: dotenv not needed, Next.js handles env vars automatically');
  }
}

export async function POST(request: NextRequest) {
  return logger.time('GENERATE_CARD_API', 'POST /api/generate-card', async () => {
    try {
      const body = await request.json();
      const { 
        profession, 
        level = "Middle", 
        company = "—Å—Ç–∞—Ä—Ç–∞–ø",
        companySize,
        location,
        specialization,
        generateAudio = false,
        fastMode = false // –†–µ–∂–∏–º –±—ã—Å—Ç—Ä–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ - —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞
      } = body;
      
      logger.info('GENERATE_CARD_API', 'üé® –ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–∞—Ä—Ç–æ—á–∫–∏', {
        profession,
        level,
        company,
        companySize,
        location,
        specialization,
        generateAudio,
        fastMode,
      });

    if (!profession || typeof profession !== 'string') {
      return new Response(
        JSON.stringify({ error: '–ü—Ä–æ—Ñ–µ—Å—Å–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞' }),
        {
          status: 400,
          headers: { 'Content-Type': 'application/json' },
        }
      );
    }

    const slug = transliterate(profession);
    
    // –°–æ–∑–¥–∞–µ–º ReadableStream –¥–ª—è SSE
    const encoder = new TextEncoder();
    
    const stream = new ReadableStream({
      async start(controller) {
        const sendProgress = (message: string, progress: number) => {
          const data = JSON.stringify({ message, progress });
          controller.enqueue(encoder.encode(`data: ${data}\n\n`));
        };

        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
          const cached = await logger.time('GENERATE_CARD_API', 'checkCache', () => 
            getCachedCard(slug)
          );
          
          if (cached) {
            logger.info('GENERATE_CARD_API', '‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞', {
              profession,
              slug,
            });
            
            sendProgress('–ù–∞–π–¥–µ–Ω–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ ‚úÖ', 100);
            const finalData = JSON.stringify({ 
              ...cached,
              cached: true,
              done: true 
            });
            controller.enqueue(encoder.encode(`data: ${finalData}\n\n`));
            controller.close();
            return;
          }
          
          logger.info('GENERATE_CARD_API', 'üìù –ö–µ—à –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é', {
            profession,
            slug,
            fastMode,
          });

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ GOOGLE_API_KEY –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π
          if (!process.env.GOOGLE_API_KEY) {
            throw new Error('GOOGLE_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª .env.local —Å–æ–¥–µ—Ä–∂–∏—Ç GOOGLE_API_KEY –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä.');
          }

          sendProgress('–ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–∞—Ä—Ç–æ—á–∫–∏...', 0);
          
          if (fastMode) {
            // –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É
            logger.info('GENERATE_CARD_API', '‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏', {
              profession,
              slug,
            });
            
            const baseCard = await generateBaseCard(
              profession,
              level,
              company,
              {
                onProgress: sendProgress,
                companySize,
                location,
                specialization
              }
            );
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É —Å—Ä–∞–∑—É
            logger.info('GENERATE_CARD_API', '‚ö° –ë–∞–∑–æ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –≥–æ—Ç–æ–≤–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É', {
              profession,
              slug,
              hasImage: baseCard.images?.length > 0,
            });
            
            const baseData = JSON.stringify({ 
              ...baseCard,
              cached: false,
              done: false, // –ù–µ done, —Ç–∞–∫ –∫–∞–∫ –æ—Å—Ç–∞–ª—å–Ω–æ–µ –±—É–¥–µ—Ç –¥–æ–≥—Ä—É–∂–µ–Ω–æ
              isPartial: true
            });
            controller.enqueue(encoder.encode(`data: ${baseData}\n\n`));
            
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ —Ñ–æ–Ω–µ
            logger.info('GENERATE_CARD_API', 'üîÑ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏', {
              profession,
              slug,
            });
            
            generateCard(
              profession,
              level,
              company,
              {
                generateAudio,
                companySize,
                location,
                specialization,
                onProgress: (msg, prog) => {
                  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ–≥—Ä—É–∑–∫–∏
                  const updateData = JSON.stringify({ 
                    message: msg,
                    progress: prog,
                    type: 'update'
                  });
                  controller.enqueue(encoder.encode(`data: ${updateData}\n\n`));
                }
              }
            ).then((fullCard) => {
              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –∫–æ–≥–¥–∞ –≥–æ—Ç–æ–≤–∞
              logger.info('GENERATE_CARD_API', '‚úÖ –ü–æ–ª–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –≥–æ—Ç–æ–≤–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É', {
                profession,
                slug,
                imagesCount: fullCard.images?.length || 0,
                videosCount: fullCard.videos?.length || 0,
                hasCareerTree: !!fullCard.careerTree,
              });
              
              const fullData = JSON.stringify({ 
                ...fullCard,
                cached: false,
                done: true,
                isPartial: false
              });
              controller.enqueue(encoder.encode(`data: ${fullData}\n\n`));
              controller.close();
            }).catch((error: any) => {
              logger.error('GENERATE_CARD_API', '‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏', error);
              controller.close();
            });
          } else {
            // –ü–æ–ª–Ω—ã–π —Ä–µ–∂–∏–º: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Å—ë —Å—Ä–∞–∑—É
            logger.info('GENERATE_CARD_API', 'üé® –ü–æ–ª–Ω—ã–π —Ä–µ–∂–∏–º: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏', {
              profession,
              slug,
            });
            
            const cardData = await generateCard(
              profession,
              level,
              company,
              {
                generateAudio,
                onProgress: sendProgress,
                companySize,
                location,
                specialization
              }
            );

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            logger.info('GENERATE_CARD_API', '‚úÖ –ü–æ–ª–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –≥–æ—Ç–æ–≤–∞ (–ø–æ–ª–Ω—ã–π —Ä–µ–∂–∏–º)', {
              profession,
              slug,
              imagesCount: cardData.images?.length || 0,
              videosCount: cardData.videos?.length || 0,
              hasCareerTree: !!cardData.careerTree,
            });
            
            const finalData = JSON.stringify({ 
              ...cardData,
              cached: false,
              done: true 
            });
            controller.enqueue(encoder.encode(`data: ${finalData}\n\n`));
            
            controller.close();
          }
        } catch (error: any) {
          logger.error('GENERATE_CARD_API', '‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏', error, {
            profession,
            slug,
            fastMode,
          });
          
          // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
          let errorMessage = '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏';
          if (error?.error?.message) {
            errorMessage = error.error.message;
          } else if (error?.message) {
            errorMessage = error.message;
          } else if (typeof error === 'string') {
            errorMessage = error;
          }
          
          // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—à–∏–±–æ–∫ –ª–æ–∫–∞—Ü–∏–∏
          if (errorMessage.includes('location') || errorMessage.includes('FAILED_PRECONDITION')) {
            errorMessage = `–û—à–∏–±–∫–∞ API: ${errorMessage}. Google AI API –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å VPN –∏–ª–∏ –¥—Ä—É–≥–æ–π API –∫–ª—é—á —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤–∞—à–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞.`;
          }
          
          const errorData = JSON.stringify({ 
            error: errorMessage,
            done: true 
          });
          controller.enqueue(encoder.encode(`data: ${errorData}\n\n`));
          controller.close();
        }
      },
    });

      return new Response(stream, {
        headers: {
          'Content-Type': 'text/event-stream',
          'Cache-Control': 'no-cache',
          'Connection': 'keep-alive',
        },
      });
    }, {
      profession,
      fastMode,
    });
  } catch (error: any) {
    logger.error('GENERATE_CARD_API', '‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ POST /api/generate-card', error);
    
    return new Response(
      JSON.stringify({ error: error.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }),
      {
        status: 500,
        headers: { 'Content-Type': 'application/json' },
      }
    );
  }
}

