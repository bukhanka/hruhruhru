
import { NextRequest, NextResponse } from 'next/server';
import { GoogleGenAI } from '@google/genai';
import { ChatRequest, ChatResponse, UserPersona, Message } from '@/types/chat';
import fs from 'fs';
import path from 'path';
import { setupProxy } from '@/lib/proxy-config'; // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏
import { logger } from '@/lib/logger';
import { 
  generateCard, 
  transliterate, 
  getCachedCard,
  generateProfessionClarificationQuestion,
  extractProfessionDescription
} from '@/lib/card-generator';

// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–∫—Å–∏ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –∫–ª–∏–µ–Ω—Ç–∞
setupProxy();

// –õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Google AI
let aiClient: GoogleGenAI | null = null;

function getAIClient(): GoogleGenAI {
  if (!aiClient) {
    if (!process.env.GOOGLE_API_KEY) {
      throw new Error('GOOGLE_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    }
    
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø—Ä–æ–∫—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
    setupProxy();
    
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GoogleGenAI –∫–ª–∏–µ–Ω—Ç–∞...');
    console.log('–ü—Ä–æ–∫—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω:', {
      HTTP_PROXY: process.env.HTTP_PROXY ? '–¥–∞' : '–Ω–µ—Ç',
      HTTPS_PROXY: process.env.HTTPS_PROXY ? '–¥–∞' : '–Ω–µ—Ç',
    });
    
    aiClient = new GoogleGenAI({
      apiKey: process.env.GOOGLE_API_KEY,
    });
  }
  return aiClient;
}

// Load available professions
function getAvailableProfessions() {
  const dataDir = path.join(process.cwd(), 'data', 'professions');
  try {
    const files = fs.readdirSync(dataDir);
    return files
      .filter((f) => f.endsWith('.json'))
      .map((f) => {
        const data = JSON.parse(fs.readFileSync(path.join(dataDir, f), 'utf-8'));
        return {
          slug: data.slug,
          profession: data.profession,
          level: data.level,
          company: data.company,
          image: data.images?.[0] || null,
        };
      });
  } catch (error) {
    return [];
  }
}

// Intent Parser: –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function parseIntent(message: string, history: Message[]): Promise<{
  intent: 'search_profession' | 'uncertain' | 'clarification' | 'general_chat' | 'scenario_choice' | 'game_day' | 'compare_professions' | 'show_impact' | 'show_similar' | 'show_tasks' | 'show_career_details' | 'explain_levels' | 'save_card' | 'share_card';
  confidence: number;
  extractedInfo: Record<string, any>;
}> {
  const prompt = `–¢—ã AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ –µ–≥–æ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ.

–í–æ–∑–º–æ–∂–Ω—ã–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è:
- "search_profession": –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–Ω–∞–µ—Ç, –∫–∞–∫—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –∏—â–µ—Ç –∏–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –Ω–∞–≤—ã–∫–∏/–¥–æ–ª–∂–Ω–æ—Å—Ç–∏
- "uncertain": –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–Ω–∞–µ—Ç, —á–µ–≥–æ —Ö–æ—á–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ—Ä–∞–∑—ã —Ç–∏–ø–∞ "–Ω–µ –∑–Ω–∞—é", "–ø–æ–º–æ–≥–∏ –≤—ã–±—Ä–∞—Ç—å", "—á—Ç–æ –ø–æ—Å–æ–≤–µ—Ç—É–µ—à—å"
- "clarification": –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å
- "scenario_choice": –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –º–µ–∂–¥—É "–∑–Ω–∞—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é" –∏–ª–∏ "–Ω–µ –∑–Ω–∞—é"
- "game_day": –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø—Ä–æ–∂–∏—Ç—å –¥–µ–Ω—å –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ (—Ñ—Ä–∞–∑—ã: "–ø—Ä–æ–∂–∏—Ç—å –¥–µ–Ω—å", "–∏–≥—Ä–æ–≤–æ–π –¥–µ–Ω—å", "—Å–∏–º—É–ª—è—Ü–∏—è")
- "compare_professions": –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —Å—Ä–∞–≤–Ω–∏—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ (—Ñ—Ä–∞–∑—ã: "—Å—Ä–∞–≤–Ω–∏", "–≤ —á–µ–º —Ä–∞–∑–Ω–∏—Ü–∞", "–æ—Ç–ª–∏—á–∏—è")
- "show_impact": –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ –≤–ª–∏—è–Ω–∏–∏/—Ü–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ (—Ñ—Ä–∞–∑—ã: "–∫–∞–∫–∞—è –ø–æ–ª—å–∑–∞", "–∑–∞—á–µ–º", "–≤–ª–∏—è–Ω–∏–µ")
- "show_similar": –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø–æ—Ö–æ–∂–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ (—Ñ—Ä–∞–∑—ã: "–ø–æ—Ö–æ–∂–∏–µ", "–∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ", "–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã", "—á—Ç–æ –µ—â–µ")
- "show_tasks": –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞—á (—Ñ—Ä–∞–∑—ã: "–ø—Ä–∏–º–µ—Ä –∑–∞–¥–∞—á", "—á—Ç–æ –¥–µ–ª–∞–µ—Ç", "–∑–∞–¥–∞—á–∏", "–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏")
- "show_career_details": –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ –∫–∞—Ä—å–µ—Ä–Ω–æ–º —Ä–æ—Å—Ç–µ (—Ñ—Ä–∞–∑—ã: "–∫–∞—Ä—å–µ—Ä–∞", "—Ä–æ—Å—Ç", "—á—Ç–æ –¥–∞–ª—å—à–µ", "—Ä–∞–∑–≤–∏—Ç–∏–µ")
- "explain_levels": –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ —Ä–∞–∑–ª–∏—á–∏—è—Ö —É—Ä–æ–≤–Ω–µ–π (—Ñ—Ä–∞–∑—ã: "–æ—Ç–ª–∏—á–∏–µ junior", "—á–µ–º –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è middle", "—Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É")
- "save_card": –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É (—Ñ—Ä–∞–∑—ã: "—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å", "—Å–∫–∞—á–∞—Ç—å", "PDF", "–∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
- "share_card": –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø–æ–¥–µ–ª–∏—Ç—å—Å—è (—Ñ—Ä–∞–∑—ã: "–ø–æ–¥–µ–ª–∏—Ç—å—Å—è", "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å", "—Å—Å—ã–ª–∫–∞")
- "general_chat": –æ–±—â–µ–Ω–∏–µ, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –≤–æ–ø—Ä–æ—Å—ã –æ —Å–µ—Ä–≤–∏—Å–µ

–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:
${history.slice(-3).map((m) => `${m.role}: ${m.content}`).join('\n')}

–¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${message}"

–û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
  "intent": "...",
  "confidence": 0.0-1.0,
  "extractedInfo": {
    "profession": "–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –µ—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è",
    "skills": ["–Ω–∞–≤—ã–∫1", "–Ω–∞–≤—ã–∫2"],
    "level": "junior/middle/senior –µ—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è",
    "interests": ["–∏–Ω—Ç–µ—Ä–µ—Å1", "–∏–Ω—Ç–µ—Ä–µ—Å2"],
    "professionsToCompare": ["–ø—Ä–æ—Ñ–µ—Å—Å–∏—è1", "–ø—Ä–æ—Ñ–µ—Å—Å–∏—è2"] - –µ—Å–ª–∏ —Ö–æ—á–µ—Ç —Å—Ä–∞–≤–Ω–∏—Ç—å,
    "levelsToCompare": ["junior", "senior"] - –µ—Å–ª–∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ —Ä–∞–∑–ª–∏—á–∏—è—Ö —É—Ä–æ–≤–Ω–µ–π
  }
}`;

  try {
    const response = await getAIClient().models.generateContent({
      model: 'gemini-2.0-flash',
      contents: prompt,
      config: {
        temperature: 0.3,
        responseMimeType: 'application/json',
      },
    });

    const result = JSON.parse(response.text || '{}');
    return result;
  } catch (error: any) {
    console.error('Intent parsing error:', error);
    console.error('Intent parsing error details:', {
      message: error?.message,
      code: error?.code,
      status: error?.status,
      statusText: error?.statusText,
    });
    return {
      intent: 'general_chat',
      confidence: 0.5,
      extractedInfo: {},
    };
  }
}

// Persona Detector: –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–µ—Ä—Å–æ–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function detectPersona(
  message: string,
  history: Message[],
  currentPersona: UserPersona | null
): Promise<UserPersona> {
  const prompt = `–¢—ã AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ù–∞ –æ—Å–Ω–æ–≤–µ –¥–∏–∞–ª–æ–≥–∞ –æ–ø—Ä–µ–¥–µ–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å: ${JSON.stringify(currentPersona || {})}

–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:
${history.slice(-5).map((m) => `${m.role}: ${m.content}`).join('\n')}

–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${message}"

–û–ø—Ä–µ–¥–µ–ª–∏ –∏ –æ–±–Ω–æ–≤–∏ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
  "experience": "junior/middle/senior/none",
  "interests": ["–∏–Ω—Ç–µ—Ä–µ—Å1", "–∏–Ω—Ç–µ—Ä–µ—Å2"],
  "currentRole": "—Ç–µ–∫—É—â–∞—è —Ä–æ–ª—å –µ—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è",
  "goals": ["—Ü–µ–ª—å1", "—Ü–µ–ª—å2"],
  "isUncertain": true/false
}`;

  try {
    const response = await getAIClient().models.generateContent({
      model: 'gemini-2.0-flash',
      contents: prompt,
      config: {
        temperature: 0.3,
        responseMimeType: 'application/json',
      },
    });

    return JSON.parse(response.text || '{}');
  } catch (error: any) {
    console.error('Persona detection error:', error);
    console.error('Persona detection error details:', {
      message: error?.message,
      code: error?.code,
      status: error?.status,
    });
    return currentPersona || { isUncertain: false };
  }
}

// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Å—Ü–µ–Ω–∞—Ä–∏—è
async function generateGreeting(): Promise<{ content: string; buttons: string[] }> {
  return {
    content: 'üëã –ü—Ä–∏–≤–µ—Ç! –•–æ—á–µ—à—å –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å, –∫–∞–∫–æ–≤–æ –±—ã—Ç—å –≤ —Ä–æ–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ ‚Äî –∏–ª–∏ –ø–æ–º–æ—á—å —Ç–µ–±–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Ç–µ–±–µ –ø–æ–¥–æ–π–¥—ë—Ç?',
    buttons: [
      'üéØ –Ø —É–∂–µ –∑–Ω–∞—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é',
      'ü§î –ü–æ–º–æ–≥–∏ –º–Ω–µ –≤—ã–±—Ä–∞—Ç—å',
      'üéÆ –ü—Ä–æ–∂–∏—Ç—å –¥–µ–Ω—å –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏',
      '‚öñÔ∏è –°—Ä–∞–≤–Ω–∏—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏',
    ],
  };
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º—è–≥–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–∏–≤—à–∏—Ö—Å—è (–°—Ü–µ–Ω–∞—Ä–∏–π 2)
async function generateSoftQuestions(step: number, history: Message[]): Promise<{ content: string; buttons: string[] }> {
  const questions = [
    {
      content: '–ß—Ç–æ —Ç–µ–±–µ –±–æ–ª—å—à–µ –ø–æ –¥—É—à–µ?',
      buttons: ['‚öôÔ∏è –õ–æ–≥–∏–∫–∞', 'üé® –ö—Ä–µ–∞—Ç–∏–≤', 'üí¨ –û–±—â–µ–Ω–∏–µ', 'üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞'],
    },
    {
      content: '–¢—ã –ª—é–±–∏—à—å —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ —Å–∞–º –ø–æ —Å–µ–±–µ?',
      buttons: ['üë• –í –∫–æ–º–∞–Ω–¥–µ', 'üßò –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ', '‚öñÔ∏è –ò —Ç–∞–∫, –∏ —Ç–∞–∫'],
    },
    {
      content: '–ß—Ç–æ —Ç–µ–±–µ –≤–∞–∂–Ω–µ–µ –≤ —Ä–∞–±–æ—Ç–µ?',
      buttons: ['üí∞ –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å', 'üöÄ –î—Ä–∞–π–≤ —Å—Ç–∞—Ä—Ç–∞–ø–∞', 'üéØ –°–º—ã—Å–ª –∏ –ø–æ–ª—å–∑–∞', 'üåü –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ'],
    },
  ];
  
  if (step >= 0 && step < questions.length) {
    return questions[step];
  }
  
  // –ï—Å–ª–∏ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–¥–∞–Ω—ã, –ø–æ–¥–±–∏—Ä–∞–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
  return {
    content: '–û—Ç–ª–∏—á–Ω–æ! –°–µ–π—á–∞—Å –ø–æ–¥–±–µ—Ä—É –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –ø–æ–¥ —Ç–≤–æ–π —Å—Ç–∏–ª—å üéØ',
    buttons: [],
  };
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –¥–Ω—è –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
async function generateGameDay(profession: string): Promise<{ content: string; buttons: string[]; metadata?: any }> {
  const ai = getAIClient();
  
  const prompt = `–¢—ã AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –°–æ–∑–¥–∞–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π "–∏–≥—Ä–æ–≤–æ–π –¥–µ–Ω—å" –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ "${profession}".

–û–ø–∏—à–∏ –ø–µ—Ä–≤—É—é —Å–∏—Ç—É–∞—Ü–∏—é —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è (—É—Ç—Ä–æ, 9:00-10:00), –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å–¥–µ–ª–∞—Ç—å –≤—ã–±–æ—Ä.

–§–æ—Ä–º–∞—Ç:
{
  "content": "–û–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)",
  "situation": "–∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç",
  "time": "09:00",
  "buttons": ["–î–µ–π—Å—Ç–≤–∏–µ 1", "–î–µ–π—Å—Ç–≤–∏–µ 2", "–î–µ–π—Å—Ç–≤–∏–µ 3"]
}

–ü—Ä–∏–º–µ—Ä –¥–ª—è Frontend-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞:
{
  "content": "‚òï 9:00 - –¢—ã –ø—Ä–∏—à–µ–ª –≤ –æ—Ñ–∏—Å. –ù–∞ Slack 5 –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: –∫–æ–ª–ª–µ–≥–∞ –ø—Ä–æ—Å–∏—Ç –ø–æ–º–æ—á—å —Å –±–∞–≥–æ–º, PM –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç –æ –¥–µ–¥–ª–∞–π–Ω–µ, –∏ —Ç–∏–º–ª–∏–¥ –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –Ω–∞ –∫–æ–¥-—Ä–µ–≤—å—é. –ß—Ç–æ –¥–µ–ª–∞–µ—à—å –ø–µ—Ä–≤—ã–º –¥–µ–ª–æ–º?",
  "situation": "morning_decisions",
  "time": "09:00",
  "buttons": ["–ü–æ–º–æ—á—å —Å –±–∞–≥–æ–º", "–ò–¥—Ç–∏ –Ω–∞ –∫–æ–¥-—Ä–µ–≤—å—é", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–∞–¥–∞—á–∏"]
}

–°–æ–∑–¥–∞–π –ø–µ—Ä–≤—É—é —Å–∏—Ç—É–∞—Ü–∏—é –¥–ª—è "${profession}":`;

  try {
    const response = await ai.models.generateContent({
      model: 'gemini-2.0-flash',
      contents: prompt,
      config: {
        temperature: 0.8,
        responseMimeType: 'application/json',
      },
    });

    const result = JSON.parse(response.text || '{}');
    
    return {
      content: result.content || `–ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä–æ–≤–æ–π –¥–µ–Ω—å –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ ${profession}!`,
      buttons: result.buttons || ['–ù–∞—á–∞—Ç—å –¥–µ–Ω—å', '–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é'],
      metadata: {
        isGameDay: true,
        profession,
        situation: result.situation || 'start',
        time: result.time || '09:00',
        step: 1,
      },
    };
  } catch (error: any) {
    console.error('Game day generation error:', error);
    return {
      content: `üéÆ –ò–≥—Ä–æ–≤–æ–π –¥–µ–Ω—å –¥–ª—è ${profession}! –ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã –Ω–∞—á–∏–Ω–∞–µ—à—å —Å–≤–æ–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å. –ß—Ç–æ –¥–µ–ª–∞–µ—à—å –ø–µ—Ä–≤—ã–º?`,
      buttons: ['–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—á—Ç—É', '–í—ã–ø–∏—Ç—å –∫–æ—Ñ–µ', '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É'],
      metadata: {
        isGameDay: true,
        profession,
        step: 1,
      },
    };
  }
}

// –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –¥–Ω—è (—Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥)
async function continueGameDay(
  profession: string,
  userChoice: string,
  currentStep: number,
  currentTime: string,
  currentSituation: string
): Promise<{ content: string; buttons: string[]; metadata?: any }> {
  const ai = getAIClient();
  
  const prompt = `–¢—ã AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ü—Ä–æ–¥–æ–ª–∂–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π "–∏–≥—Ä–æ–≤–æ–π –¥–µ–Ω—å" –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ "${profession}".

–¢–µ–∫—É—â–∞—è —Å–∏—Ç—É–∞—Ü–∏—è: ${currentSituation}
–í—Ä–µ–º—è: ${currentTime}
–®–∞–≥: ${currentStep}
–í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "${userChoice}"

–°–æ–∑–¥–∞–π —Å–ª–µ–¥—É—é—â—É—é —Å–∏—Ç—É–∞—Ü–∏—é (—á–µ—Ä–µ–∑ 1-2 —á–∞—Å–∞). –í—Å–µ–≥–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 5-6 —Å–∏—Ç—É–∞—Ü–∏–π –∑–∞ –¥–µ–Ω—å.

–§–æ—Ä–º–∞—Ç JSON:
{
  "content": "–û–ø–∏—Å–∞–Ω–∏–µ —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ + –Ω–æ–≤–∞—è —Å–∏—Ç—É–∞—Ü–∏—è",
  "situation": "–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
  "time": "–Ω–æ–≤–æ–µ –≤—Ä–µ–º—è (HH:00)",
  "buttons": ["–î–µ–π—Å—Ç–≤–∏–µ 1", "–î–µ–π—Å—Ç–≤–∏–µ 2", "–î–µ–π—Å—Ç–≤–∏–µ 3"],
  "isLastStep": false
}

–ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å–∏—Ç—É–∞—Ü–∏—è –¥–Ω—è (—à–∞–≥ 5-6), —É—Å—Ç–∞–Ω–æ–≤–∏ "isLastStep": true –∏ –¥–æ–±–∞–≤—å –∫–Ω–æ–ø–∫–∏:
["–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–µ–Ω—å", "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", "–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é"]`;

  try {
    const response = await ai.models.generateContent({
      model: 'gemini-2.0-flash',
      contents: prompt,
      config: {
        temperature: 0.8,
        responseMimeType: 'application/json',
      },
    });

    const result = JSON.parse(response.text || '{}');
    const nextStep = currentStep + 1;
    
    return {
      content: result.content || '–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–µ–Ω—å...',
      buttons: result.buttons || ['–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', '–ó–∞–≤–µ—Ä—à–∏—Ç—å'],
      metadata: {
        isGameDay: true,
        profession,
        situation: result.situation || 'continue',
        time: result.time || currentTime,
        step: nextStep,
        isLastStep: result.isLastStep || nextStep >= 6,
      },
    };
  } catch (error: any) {
    console.error('Continue game day error:', error);
    return {
      content: '–î–µ–Ω—å –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è... –ß—Ç–æ –¥–µ–ª–∞–µ—à—å –¥–∞–ª—å—à–µ?',
      buttons: ['–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É', '–°–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤', '–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–µ–Ω—å'],
      metadata: {
        isGameDay: true,
        profession,
        step: currentStep + 1,
      },
    };
  }
}

// –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π
async function compareProfessions(profession1: string, profession2: string): Promise<{ content: string; comparison: any }> {
  const ai = getAIClient();
  
  const prompt = `–¢—ã AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –°—Ä–∞–≤–Ω–∏ –¥–≤–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏: "${profession1}" –∏ "${profession2}".

–°–æ–∑–¥–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º:
- –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã
- –£—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞
- –ù–∞–≤—ã–∫–∏ (hard/soft)
- –ö–∞—Ä—å–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç
- –í–ª–∏—è–Ω–∏–µ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç/–∫–æ–º–ø–∞–Ω–∏—é
- –§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã (–æ—Ñ–∏—Å/—É–¥–∞–ª–µ–Ω–∫–∞)
- –ó–∞—Ä–ø–ª–∞—Ç–Ω–∞—è –≤–∏–ª–∫–∞

–§–æ—Ä–º–∞—Ç JSON:
{
  "content": "–ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ –æ –≥–ª–∞–≤–Ω—ã—Ö —Ä–∞–∑–ª–∏—á–∏—è—Ö (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)",
  "comparison": {
    "schedule": {"profession1": "–æ–ø–∏—Å–∞–Ω–∏–µ", "profession2": "–æ–ø–∏—Å–∞–Ω–∏–µ"},
    "stress": {"profession1": "–æ–ø–∏—Å–∞–Ω–∏–µ", "profession2": "–æ–ø–∏—Å–∞–Ω–∏–µ"},
    "skills": {"profession1": ["–Ω–∞–≤—ã–∫1", "–Ω–∞–≤—ã–∫2"], "profession2": ["–Ω–∞–≤—ã–∫1", "–Ω–∞–≤—ã–∫2"]},
    "growth": {"profession1": "–æ–ø–∏—Å–∞–Ω–∏–µ", "profession2": "–æ–ø–∏—Å–∞–Ω–∏–µ"},
    "impact": {"profession1": "–æ–ø–∏—Å–∞–Ω–∏–µ", "profession2": "–æ–ø–∏—Å–∞–Ω–∏–µ"},
    "format": {"profession1": "–æ–ø–∏—Å–∞–Ω–∏–µ", "profession2": "–æ–ø–∏—Å–∞–Ω–∏–µ"},
    "salary": {"profession1": "–¥–∏–∞–ø–∞–∑–æ–Ω", "profession2": "–¥–∏–∞–ø–∞–∑–æ–Ω"}
  }
}`;

  try {
    const response = await ai.models.generateContent({
      model: 'gemini-2.0-flash',
      contents: prompt,
      config: {
        temperature: 0.5,
        responseMimeType: 'application/json',
      },
    });

    const result = JSON.parse(response.text || '{}');
    
    return {
      content: result.content || `–í–æ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ ${profession1} –∏ ${profession2}:`,
      comparison: result.comparison || {},
    };
  } catch (error: any) {
    console.error('Compare professions error:', error);
    return {
      content: `–°—Ä–∞–≤–Ω–µ–Ω–∏–µ ${profession1} –∏ ${profession2}. –û–±–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã –ø–æ-—Å–≤–æ–µ–º—É!`,
      comparison: {},
    };
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Ö–æ–∂–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
async function showSimilarProfessions(profession: string): Promise<{ content: string; cards: any[] }> {
  const ai = getAIClient();
  const professions = getAvailableProfessions();
  
  const prompt = `–¢—ã AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ù–∞–π–¥–∏ 3-4 –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏, –ø–æ—Ö–æ–∂–∏–µ –Ω–∞ "${profession}".

–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏:
${professions.map((p, i) => `${i + 1}. ${p.profession} (${p.level}, ${p.company}) - slug: ${p.slug}`).join('\n')}

–í—ã–±–µ—Ä–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ:
- –ò–º–µ—é—Ç —Å—Ö–æ–∂–∏–µ –Ω–∞–≤—ã–∫–∏
- –ü–æ—Ö–æ–∂–∏ –ø–æ —Ç–∏–ø—É —Ä–∞–±–æ—Ç—ã
- –ú–æ–≥—É—Ç –±—ã—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –∏–∑ "${profession}"

–§–æ—Ä–º–∞—Ç JSON:
{
  "content": "–ö—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ—á–µ–º—É —ç—Ç–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –ø–æ—Ö–æ–∂–∏ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)",
  "professionSlugs": ["slug1", "slug2", "slug3"]
}`;

  try {
    const response = await ai.models.generateContent({
      model: 'gemini-2.0-flash',
      contents: prompt,
      config: {
        temperature: 0.5,
        responseMimeType: 'application/json',
      },
    });

    const result = JSON.parse(response.text || '{}');
    const selectedProfessions = professions.filter((p) =>
      result.professionSlugs?.includes(p.slug)
    );

    return {
      content: result.content || `–í–æ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏, –ø–æ—Ö–æ–∂–∏–µ –Ω–∞ ${profession}:`,
      cards: selectedProfessions.map((p) => ({
        slug: p.slug,
        profession: p.profession,
        level: p.level,
        company: p.company,
        image: p.image,
      })),
    };
  } catch (error: any) {
    console.error('Similar professions error:', error);
    // Fallback: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª—É—á–∞–π–Ω—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π
    return {
      content: `–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π, –ø–æ—Ö–æ–∂–∏—Ö –Ω–∞ ${profession}:`,
      cards: professions.slice(0, 3),
    };
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞—á –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
async function showTaskExamples(profession: string): Promise<{ content: string; tasks: string[] }> {
  const ai = getAIClient();
  
  const prompt = `–¢—ã AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –û–ø–∏—à–∏ —Ç–∏–ø–∏—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ "${profession}".

–°–æ–∑–¥–∞–π 5-7 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ –∑–∞–¥–∞—á, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —ç—Ç–æ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è/–Ω–µ–¥–µ–ª–∏.
–ó–∞–¥–∞—á–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –∏ –ø–æ–Ω—è—Ç–Ω—ã–º–∏.

–§–æ—Ä–º–∞—Ç JSON:
{
  "content": "–ö—Ä–∞—Ç–∫–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ (1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)",
  "tasks": [
    "–ó–∞–¥–∞—á–∞ 1 - –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
    "–ó–∞–¥–∞—á–∞ 2 - –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
    "–ó–∞–¥–∞—á–∞ 3 - –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
    "..."
  ]
}

–ü—Ä–∏–º–µ—Ä –¥–ª—è Frontend-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞:
{
  "content": "–í–æ—Ç —Ç–∏–ø–∏—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ Frontend-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–π –Ω–µ–¥–µ–ª–∏:",
  "tasks": [
    "–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –ø–æ–ª–µ–π",
    "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞",
    "–ü—Ä–æ–≤–µ—Å—Ç–∏ –∫–æ–¥-—Ä–µ–≤—å—é Pull Request –∫–æ–ª–ª–µ–≥–∏",
    "–ò—Å–ø—Ä–∞–≤–∏—Ç—å –±–∞–≥ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö",
    "–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
  ]
}`;

  try {
    const response = await ai.models.generateContent({
      model: 'gemini-2.0-flash',
      contents: prompt,
      config: {
        temperature: 0.7,
        responseMimeType: 'application/json',
      },
    });

    const result = JSON.parse(response.text || '{}');
    
    return {
      content: result.content || `–¢–∏–ø–∏—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è ${profession}:`,
      tasks: result.tasks || [],
    };
  } catch (error: any) {
    console.error('Task examples error:', error);
    return {
      content: `–¢–∏–ø–∏—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è ${profession}:`,
      tasks: [
        '–†–∞–±–æ—Ç–∞ –Ω–∞–¥ —Ç–µ–∫—É—â–∏–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏',
        '–û–±—â–µ–Ω–∏–µ —Å –∫–æ–ª–ª–µ–≥–∞–º–∏ –∏ –∫–æ–º–∞–Ω–¥–æ–π',
        '–†–µ—à–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á',
        '–£—á–∞—Å—Ç–∏–µ –≤ –≤—Å—Ç—Ä–µ—á–∞—Ö –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏',
      ],
    };
  }
}

// –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ä—å–µ—Ä–Ω–æ–º –ø—É—Ç–∏
async function showCareerDetails(profession: string, currentLevel?: string): Promise<{ content: string; details: any }> {
  const ai = getAIClient();
  
  const prompt = `–¢—ã AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –û–ø–∏—à–∏ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∫–∞—Ä—å–µ—Ä–Ω—ã–π –ø—É—Ç—å –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ "${profession}"${currentLevel ? ` (—Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: ${currentLevel})` : ''}.

–°–æ–∑–¥–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏ —Å–æ–≤–µ—Ç–∞–º–∏.

–§–æ—Ä–º–∞—Ç JSON:
{
  "content": "–û–±—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ –ø—É—Ç–∏ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)",
  "levels": [
    {
      "level": "Junior",
      "duration": "1-2 –≥–æ–¥–∞",
      "skills": ["–Ω–∞–≤—ã–∫1", "–Ω–∞–≤—ã–∫2"],
      "responsibilities": "–ß—Ç–æ –¥–µ–ª–∞–µ—Ç –Ω–∞ —ç—Ç–æ–º —É—Ä–æ–≤–Ω–µ",
      "salary": "–¥–∏–∞–ø–∞–∑–æ–Ω –∑–∞—Ä–ø–ª–∞—Ç—ã",
      "tips": "–°–æ–≤–µ—Ç—ã –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å"
    },
    // ... –¥–ª—è Middle, Senior, Lead/Principal
  ],
  "nextSteps": "–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–ª—è –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å)"
}`;

  try {
    const response = await ai.models.generateContent({
      model: 'gemini-2.0-flash',
      contents: prompt,
      config: {
        temperature: 0.6,
        responseMimeType: 'application/json',
      },
    });

    const result = JSON.parse(response.text || '{}');
    
    return {
      content: result.content || `–ö–∞—Ä—å–µ—Ä–Ω—ã–π –ø—É—Ç—å –¥–ª—è ${profession}:`,
      details: result,
    };
  } catch (error: any) {
    console.error('Career details error:', error);
    return {
      content: `–ö–∞—Ä—å–µ—Ä–Ω—ã–π –ø—É—Ç—å –¥–ª—è ${profession} –æ–±—ã—á–Ω–æ –≤–∫–ª—é—á–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Ä–æ–≤–Ω–µ–π —Ä–æ—Å—Ç–∞.`,
      details: {},
    };
  }
}

// –û–±—ä—è—Å–Ω–∏—Ç—å —Ä–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏
async function explainLevelDifferences(profession: string, levels: string[]): Promise<{ content: string; comparison: any }> {
  const ai = getAIClient();
  
  const level1 = levels[0] || 'Junior';
  const level2 = levels[1] || 'Senior';
  
  const prompt = `–¢—ã AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –û–±—ä—è—Å–Ω–∏ —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏ ${level1} –∏ ${level2} –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ "${profession}".

–°–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –∫–ª—é—á–µ–≤—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.

–§–æ—Ä–º–∞—Ç JSON:
{
  "content": "–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –≥–ª–∞–≤–Ω—ã—Ö —Ä–∞–∑–ª–∏—á–∏–π (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)",
  "comparison": {
    "experience": {
      "${level1}": "–æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø—ã—Ç–∞",
      "${level2}": "–æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø—ã—Ç–∞"
    },
    "responsibilities": {
      "${level1}": "–æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–µ–π",
      "${level2}": "–æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–µ–π"
    },
    "skills": {
      "${level1}": ["–Ω–∞–≤—ã–∫1", "–Ω–∞–≤—ã–∫2"],
      "${level2}": ["–Ω–∞–≤—ã–∫1", "–Ω–∞–≤—ã–∫2"]
    },
    "autonomy": {
      "${level1}": "—É—Ä–æ–≤–µ–Ω—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
      "${level2}": "—É—Ä–æ–≤–µ–Ω—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
    },
    "impact": {
      "${level1}": "–≤–ª–∏—è–Ω–∏–µ –Ω–∞ –ø—Ä–æ–µ–∫—Ç/–∫–æ–º–∞–Ω–¥—É",
      "${level2}": "–≤–ª–∏—è–Ω–∏–µ –Ω–∞ –ø—Ä–æ–µ–∫—Ç/–∫–æ–º–∞–Ω–¥—É"
    },
    "salary": {
      "${level1}": "–¥–∏–∞–ø–∞–∑–æ–Ω",
      "${level2}": "–¥–∏–∞–ø–∞–∑–æ–Ω"
    }
  }
}`;

  try {
    const response = await ai.models.generateContent({
      model: 'gemini-2.0-flash',
      contents: prompt,
      config: {
        temperature: 0.5,
        responseMimeType: 'application/json',
      },
    });

    const result = JSON.parse(response.text || '{}');
    
    return {
      content: result.content || `–í–æ—Ç –≥–ª–∞–≤–Ω—ã–µ —Ä–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É ${level1} –∏ ${level2}:`,
      comparison: result.comparison || {},
    };
  } catch (error: any) {
    console.error('Level differences error:', error);
    return {
      content: `${level2} –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç ${level1} –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–º —É—Ä–æ–≤–Ω–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏, –æ–ø—ã—Ç–∞ –∏ –≤–ª–∏—è–Ω–∏—è –Ω–∞ –ø—Ä–æ–µ–∫—Ç.`,
      comparison: {},
    };
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –≤–ª–∏—è–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
async function showProfessionImpact(profession: string): Promise<{ content: string; impact: any }> {
  const ai = getAIClient();
  
  const prompt = `–¢—ã AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –û–ø–∏—à–∏ –≤–ª–∏—è–Ω–∏–µ –∏ —Ü–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ "${profession}".

–ü–æ–∫–∞–∂–∏:
- –ö–∞–∫—É—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø–æ–ª—å–∑—É –ø—Ä–∏–Ω–æ—Å–∏—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç
- –ö–∞–∫ –µ–≥–æ —Ä–∞–±–æ—Ç–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç/–∫–æ–º–ø–∞–Ω–∏—é
- –†–µ–∞–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –≤–ª–∏—è–Ω–∏—è (—Å —Ü–∏—Ñ—Ä–∞–º–∏ –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
- –ü–æ—á–µ–º—É —ç—Ç–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è –≤–∞–∂–Ω–∞

–§–æ—Ä–º–∞—Ç JSON:
{
  "content": "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–ª–∏—è–Ω–∏—è (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)",
  "impact": {
    "direct": "–ø—Ä—è–º–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç",
    "indirect": "–∫–æ—Å–≤–µ–Ω–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –∫–æ–º–ø–∞–Ω–∏—é",
    "examples": ["–ø—Ä–∏–º–µ—Ä 1 —Å —Ü–∏—Ñ—Ä–∞–º–∏", "–ø—Ä–∏–º–µ—Ä 2"],
    "importance": "–ø–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ"
  }
}

–ü—Ä–∏–º–µ—Ä –¥–ª—è Data Scientist:
"–¢—ã –∫–∞–∫ Data Scientist —Å–æ–∫—Ä–∞—â–∞–µ—à—å –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –Ω–∞ 40% ‚Äî —ç—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ —ç–∫–æ–Ω–æ–º–∏—Ç—å 1 –º–ª–Ω —Ä—É–±–ª–µ–π –≤ –≥–æ–¥ –∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è –≤ 3 —Ä–∞–∑–∞ –±—ã—Å—Ç—Ä–µ–µ."`;

  try {
    const response = await ai.models.generateContent({
      model: 'gemini-2.0-flash',
      contents: prompt,
      config: {
        temperature: 0.6,
        responseMimeType: 'application/json',
      },
    });

    const result = JSON.parse(response.text || '{}');
    
    return {
      content: result.content || `–ü—Ä–æ—Ñ–µ—Å—Å–∏—è ${profession} –≤–∞–∂–Ω–∞ –∏ –ø—Ä–∏–Ω–æ—Å–∏—Ç —Ä–µ–∞–ª—å–Ω—É—é –ø–æ–ª—å–∑—É!`,
      impact: result.impact || {},
    };
  } catch (error: any) {
    console.error('Show impact error:', error);
    return {
      content: `–ü—Ä–æ—Ñ–µ—Å—Å–∏—è ${profession} –∏–≥—Ä–∞–µ—Ç –≤–∞–∂–Ω—É—é —Ä–æ–ª—å!`,
      impact: {},
    };
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Ç–æ—á–Ω—è—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –æ–± —É—Ä–æ–≤–Ω–µ –æ–ø—ã—Ç–∞ (–∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π)
async function generateLevelQuestion(profession: string): Promise<{ content: string; buttons: string[] }> {
  const ai = getAIClient();
  
  const prompt = `–¢—ã AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –î–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ "${profession}" —Å–æ–∑–¥–∞–π –≤–æ–ø—Ä–æ—Å –æ–± —É—Ä–æ–≤–Ω–µ –æ–ø—ã—Ç–∞ —Å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤.

–í–∞–∂–Ω–æ:
- –î–ª—è IT-–ø—Ä–æ—Ñ–µ—Å—Å–∏–π: –°—Ç—É–¥–µ–Ω—Ç, –î–∂—É–Ω, –ú–∏–¥–ª, –°–µ–Ω—å–æ—Ä
- –î–ª—è —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π: –ù–∞—á–∏–Ω–∞—é—â–∏–π, –û–ø—ã—Ç–Ω—ã–π, –ú–∞—Å—Ç–µ—Ä
- –î–ª—è —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π: –ù–∞—á–∏–Ω–∞—é—â–∏–π, –° –æ–ø—ã—Ç–æ–º, –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª
- –î–ª—è –¥—Ä—É–≥–∏—Ö: –∞–¥–∞–ø—Ç–∏—Ä—É–π –ø–æ–¥ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é

–§–æ—Ä–º–∞—Ç JSON:
{
  "content": "–í–æ–ø—Ä–æ—Å –æ–± –æ–ø—ã—Ç–µ",
  "buttons": ["–í–∞—Ä–∏–∞–Ω—Ç 1", "–í–∞—Ä–∏–∞–Ω—Ç 2", "–í–∞—Ä–∏–∞–Ω—Ç 3", "–í–∞—Ä–∏–∞–Ω—Ç 4"]
}

–í–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º.`;

  try {
    const response = await ai.models.generateContent({
      model: 'gemini-2.0-flash',
      contents: prompt,
      config: {
        temperature: 0.5,
        responseMimeType: 'application/json',
      },
    });

    const result = JSON.parse(response.text || '{}');
    return {
      content: result.content || '–ö–∞–∫–æ–π —É —Ç–µ–±—è —É—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞?',
      buttons: result.buttons || ['–°—Ç—É–¥–µ–Ω—Ç', '–î–∂—É–Ω (Junior)', '–ú–∏–¥–ª (Middle)', '–°–µ–Ω—å–æ—Ä (Senior)'],
    };
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞ –æ–± —É—Ä–æ–≤–Ω–µ:', error);
    return {
      content: '–ö–∞–∫–æ–π —É —Ç–µ–±—è —É—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞?',
      buttons: ['–ù–∞—á–∏–Ω–∞—é—â–∏–π', '–° –æ–ø—ã—Ç–æ–º', '–û–ø—ã—Ç–Ω—ã–π', '–ú–∞—Å—Ç–µ—Ä'],
    };
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Ç–æ—á–Ω—è—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –æ —Ñ–æ—Ä–º–∞—Ç–µ —Ä–∞–±–æ—Ç—ã (–∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π)
async function generateWorkFormatQuestion(profession: string): Promise<{ content: string; buttons: string[] } | null> {
  const ai = getAIClient();
  
  const prompt = `–¢—ã AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –î–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ "${profession}" –æ–ø—Ä–µ–¥–µ–ª–∏, –Ω—É–∂–Ω–æ –ª–∏ —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å –æ —Ñ–æ—Ä–º–∞—Ç–µ —Ä–∞–±–æ—Ç—ã (–æ—Ñ–∏—Å/—É–¥–∞–ª–µ–Ω–∫–∞).

–í–∞–∂–Ω–æ:
- –ï—Å–ª–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è —Ç—Ä–µ–±—É–µ—Ç –§–ò–ó–ò–ß–ï–°–ö–û–ì–û –ü–†–ò–°–£–¢–°–¢–í–ò–Ø (—Å—Ç—Ä–æ–∏—Ç–µ–ª—å, –≤–æ–¥–∏—Ç–µ–ª—å, –ø–æ–≤–∞—Ä, –º–∞—Å—Å–∞–∂–∏—Å—Ç, —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ —Ç.–¥.) - –≤–µ—Ä–Ω–∏ null
- –ï—Å–ª–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–Ω–æ–π (IT, –¥–∏–∑–∞–π–Ω, –º–∞—Ä–∫–µ—Ç–∏–Ω–≥, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞) - —Å–æ–∑–¥–∞–π –≤–æ–ø—Ä–æ—Å

–§–æ—Ä–º–∞—Ç JSON:
{
  "isRelevant": true/false,
  "content": "–í–æ–ø—Ä–æ—Å –æ —Ñ–æ—Ä–º–∞—Ç–µ —Ä–∞–±–æ—Ç—ã (–µ—Å–ª–∏ isRelevant=true)",
  "buttons": ["–û—Ñ–∏—Å", "–£–¥–∞–ª—ë–Ω–∫–∞", "–ì–∏–±—Ä–∏–¥", "–ù–µ –≤–∞–∂–Ω–æ"] (–µ—Å–ª–∏ isRelevant=true)
}`;

  try {
    const response = await ai.models.generateContent({
      model: 'gemini-2.0-flash',
      contents: prompt,
      config: {
        temperature: 0.3,
        responseMimeType: 'application/json',
      },
    });

    const result = JSON.parse(response.text || '{}');
    
    if (!result.isRelevant) {
      return null; // –í–æ–ø—Ä–æ—Å –Ω–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–µ–Ω –¥–ª—è —ç—Ç–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
    }
    
    return {
      content: result.content || '–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å –æ—Ñ–∏—Å –∏–ª–∏ —É–¥–∞–ª—ë–Ω–∫—É?',
      buttons: result.buttons || ['–û—Ñ–∏—Å', '–£–¥–∞–ª—ë–Ω–∫–∞', '–ì–∏–±—Ä–∏–¥', '–ù–µ –≤–∞–∂–Ω–æ'],
    };
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞ –æ —Ñ–æ—Ä–º–∞—Ç–µ —Ä–∞–±–æ—Ç—ã:', error);
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤–æ–ø—Ä–æ—Å –Ω–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–µ–Ω
    return null;
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Ç–æ—á–Ω—è—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –æ —Ä–∞–∑–º–µ—Ä–µ –∫–æ–º–ø–∞–Ω–∏–∏ (–∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π)
async function generateCompanySizeQuestion(profession: string): Promise<{ content: string; buttons: string[] }> {
  const ai = getAIClient();
  
  const prompt = `–¢—ã AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –î–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ "${profession}" —Å–æ–∑–¥–∞–π –≤–æ–ø—Ä–æ—Å –æ –º–µ—Å—Ç–µ —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏.

–í–∞–∂–Ω–æ:
- –î–ª—è IT-–ø—Ä–æ—Ñ–µ—Å—Å–∏–π: –°—Ç–∞—Ä—Ç–∞–ø, –°—Ä–µ–¥–Ω—è—è –∫–æ–º–ø–∞–Ω–∏—è, –ö—Ä—É–ø–Ω–∞—è –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏—è, –ù–µ –≤–∞–∂–Ω–æ
- –î–ª—è —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π: –ß–∞—Å—Ç–Ω–∞—è —Ñ–∏—Ä–º–∞, –ú—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ, –ö—Ä—É–ø–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è, –ù–µ –≤–∞–∂–Ω–æ
- –î–ª—è —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö: –ê–≥–µ–Ω—Ç—Å—Ç–≤–æ, –§—Ä–∏–ª–∞–Ω—Å, –ö—Ä—É–ø–Ω–∞—è —Å—Ç—É–¥–∏—è, –ù–µ –≤–∞–∂–Ω–æ
- –î–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö: –ß–∞—Å—Ç–Ω–∞—è –∫–ª–∏–Ω–∏–∫–∞, –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è –±–æ–ª—å–Ω–∏—Ü–∞, –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä, –ù–µ –≤–∞–∂–Ω–æ

–ê–¥–∞–ø—Ç–∏—Ä—É–π –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é!

–§–æ—Ä–º–∞—Ç JSON:
{
  "content": "–í–æ–ø—Ä–æ—Å –æ –º–µ—Å—Ç–µ —Ä–∞–±–æ—Ç—ã",
  "buttons": ["–í–∞—Ä–∏–∞–Ω—Ç 1", "–í–∞—Ä–∏–∞–Ω—Ç 2", "–í–∞—Ä–∏–∞–Ω—Ç 3", "–í–∞—Ä–∏–∞–Ω—Ç 4"]
}`;

  try {
    const response = await ai.models.generateContent({
      model: 'gemini-2.0-flash',
      contents: prompt,
      config: {
        temperature: 0.5,
        responseMimeType: 'application/json',
      },
    });

    const result = JSON.parse(response.text || '{}');
    return {
      content: result.content || '–ì–¥–µ —Ç—ã —Ö–æ—Ç–µ–ª –±—ã —Ä–∞–±–æ—Ç–∞—Ç—å?',
      buttons: result.buttons || ['–ß–∞—Å—Ç–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è', '–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è', '–ö—Ä—É–ø–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è', '–ù–µ –≤–∞–∂–Ω–æ'],
    };
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞ –æ –º–µ—Å—Ç–µ —Ä–∞–±–æ—Ç—ã:', error);
    return {
      content: '–ì–¥–µ —Ç—ã —Ö–æ—Ç–µ–ª –±—ã —Ä–∞–±–æ—Ç–∞—Ç—å?',
      buttons: ['–ß–∞—Å—Ç–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è', '–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è', '–ö—Ä—É–ø–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è', '–ù–µ –≤–∞–∂–Ω–æ'],
    };
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Ç–æ—á–Ω—è—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –æ –ª–æ–∫–∞—Ü–∏–∏ (–∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π)
async function generateLocationQuestion(profession: string): Promise<{ content: string; buttons: string[] }> {
  const ai = getAIClient();
  
  const prompt = `–¢—ã AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –î–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ "${profession}" —Å–æ–∑–¥–∞–π –≤–æ–ø—Ä–æ—Å –æ –ª–æ–∫–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã.

–§–æ—Ä–º–∞—Ç JSON:
{
  "content": "–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Ç—ã –ø–ª–∞–Ω–∏—Ä—É–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å?",
  "buttons": ["–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥", "–ù–µ –≤–∞–∂–Ω–æ"]
}

–í–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –¥–ª—è —ç—Ç–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏.`;

  try {
    const response = await ai.models.generateContent({
      model: 'gemini-2.0-flash',
      contents: prompt,
      config: {
        temperature: 0.5,
        responseMimeType: 'application/json',
      },
    });

    const result = JSON.parse(response.text || '{}');
    return {
      content: result.content || '–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Ç—ã –ø–ª–∞–Ω–∏—Ä—É–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å?',
      buttons: result.buttons || ['–ú–æ—Å–∫–≤–∞', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥', '–ù–µ –≤–∞–∂–Ω–æ'],
    };
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞ –æ –ª–æ–∫–∞—Ü–∏–∏:', error);
    return {
      content: '–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Ç—ã –ø–ª–∞–Ω–∏—Ä—É–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å?',
      buttons: ['–ú–æ—Å–∫–≤–∞', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥', '–ù–µ –≤–∞–∂–Ω–æ'],
    };
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Ç–æ—á–Ω—è—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
async function generateSpecializationQuestion(profession: string): Promise<{ content: string; buttons: string[] }> {
  const ai = getAIClient();
  
  const prompt = `–¢—ã AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –î–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ "${profession}" –ø—Ä–µ–¥–ª–æ–∂–∏ 3-4 –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏.

–ù–∞–ø—Ä–∏–º–µ—Ä:
- –î–ª—è "–ë–∞—Ä–∏—Å—Ç–∞": "–ö–æ—Ñ–µ–π–Ω—è –≤ –¢–¶", "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ—Ñ–µ–π–Ω—è", "–ö–æ—Ñ–µ–π–Ω—è –≤ –æ—Ç–µ–ª–µ", "–ö–æ—Ñ–µ-—Ç—Ä–∞–∫"
- –î–ª—è "Frontend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫": "–§–∏–Ω—Ç–µ—Ö", "E-commerce", "–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã", "–ù–µ –≤–∞–∂–Ω–æ"
- –î–ª—è "–ú–∞—Å—Å–∞–∂–∏—Å—Ç": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –º–∞—Å—Å–∞–∂", "–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –º–∞—Å—Å–∞–∂", "–õ–µ—á–µ–±–Ω—ã–π –º–∞—Å—Å–∞–∂", "–ù–µ –≤–∞–∂–Ω–æ"

–û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
  "content": "–í –∫–∞–∫–æ–π —Å—Ñ–µ—Ä–µ –≤–Ω—É—Ç—Ä–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å?",
  "buttons": ["–í–∞—Ä–∏–∞–Ω—Ç 1", "–í–∞—Ä–∏–∞–Ω—Ç 2", "–í–∞—Ä–∏–∞–Ω—Ç 3", "–ù–µ –≤–∞–∂–Ω–æ"]
}

–ö–Ω–æ–ø–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ (2-4 —Å–ª–æ–≤–∞) –∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º–∏ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ "${profession}".`;

  try {
    const response = await ai.models.generateContent({
      model: 'gemini-2.0-flash',
      contents: prompt,
      config: {
        temperature: 0.7,
        responseMimeType: 'application/json',
      },
    });

    const result = JSON.parse(response.text || '{}');
    
    return {
      content: result.content || '–í –∫–∞–∫–æ–π —Å—Ñ–µ—Ä–µ –≤–Ω—É—Ç—Ä–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å?',
      buttons: result.buttons || ['–í–∞—Ä–∏–∞–Ω—Ç 1', '–í–∞—Ä–∏–∞–Ω—Ç 2', '–í–∞—Ä–∏–∞–Ω—Ç 3', '–ù–µ –≤–∞–∂–Ω–æ'],
    };
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞ –æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
    return {
      content: '–í –∫–∞–∫–æ–π —Å—Ñ–µ—Ä–µ –≤–Ω—É—Ç—Ä–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å?',
      buttons: ['–§–∏–Ω—Ç–µ—Ö', '–†–∏—Ç–µ–π–ª', '–ü—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω', '–ù–µ –≤–∞–∂–Ω–æ'],
    };
  }
}

// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
// –£—á–∏—Ç—ã–≤–∞–µ–º –∫–∞–∫ –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏, —Ç–∞–∫ –∏ —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
function mapLevelAnswer(answer: string): 'junior' | 'middle' | 'senior' | 'student' {
  const answerLower = answer.toLowerCase();
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
  if (answerLower === '—Å—Ç—É–¥–µ–Ω—Ç' || answerLower.includes('—Å—Ç—É–¥–µ–Ω—Ç')) return 'student';
  if (answerLower === '–¥–∂—É–Ω (junior)' || answerLower.includes('–¥–∂—É–Ω') || answerLower.includes('junior')) return 'junior';
  if (answerLower === '–º–∏–¥–ª (middle)' || answerLower.includes('–º–∏–¥–ª') || answerLower.includes('middle')) return 'middle';
  if (answerLower === '—Å–µ–Ω—å–æ—Ä (senior)' || answerLower.includes('—Å–µ–Ω—å–æ—Ä') || answerLower.includes('senior')) return 'senior';
  return 'middle'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
}

function mapWorkFormatAnswer(answer: string): 'office' | 'remote' | 'hybrid' | 'any' {
  const answerLower = answer.toLowerCase();
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
  if (answerLower === '–æ—Ñ–∏—Å' || answerLower.includes('–æ—Ñ–∏—Å')) return 'office';
  if (answerLower === '—É–¥–∞–ª—ë–Ω–∫–∞' || answerLower.includes('—É–¥–∞–ª–µ–Ω') || answerLower.includes('remote')) return 'remote';
  if (answerLower === '–≥–∏–±—Ä–∏–¥' || answerLower.includes('–≥–∏–±—Ä–∏–¥')) return 'hybrid';
  if (answerLower === '–Ω–µ –≤–∞–∂–Ω–æ' || answerLower.includes('–Ω–µ –≤–∞–∂–Ω–æ')) return 'any';
  return 'any';
}

function mapCompanySizeAnswer(answer: string): 'startup' | 'medium' | 'large' | 'any' {
  const answerLower = answer.toLowerCase();
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
  if (answerLower === '—Å—Ç–∞—Ä—Ç–∞–ø' || answerLower.includes('—Å—Ç–∞—Ä—Ç–∞–ø')) return 'startup';
  if (answerLower === '—Å—Ä–µ–¥–Ω—è—è –∫–æ–º–ø–∞–Ω–∏—è' || answerLower.includes('—Å—Ä–µ–¥–Ω')) return 'medium';
  if (answerLower === '–∫—Ä—É–ø–Ω–∞—è –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏—è' || answerLower.includes('–∫—Ä—É–ø–Ω') || answerLower.includes('–∫–æ—Ä–ø–æ—Ä–∞—Ü')) return 'large';
  if (answerLower === '–Ω–µ –≤–∞–∂–Ω–æ' || answerLower.includes('–Ω–µ –≤–∞–∂–Ω–æ') || answerLower.includes('–ª—é–±–æ–µ')) return 'any';
  return 'any';
}

function mapLocationAnswer(answer: string): 'moscow' | 'spb' | 'other' | 'remote' {
  const answerLower = answer.toLowerCase();
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
  if (answerLower === '–º–æ—Å–∫–≤–∞' || answerLower.includes('–º–æ—Å–∫–≤')) return 'moscow';
  if (answerLower === '—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥' || answerLower.includes('—Å–∞–Ω–∫—Ç') || answerLower.includes('–ø–µ—Ç–µ—Ä–±—É—Ä–≥') || answerLower.includes('—Å–ø–±')) return 'spb';
  if (answerLower === '—É–¥–∞–ª—ë–Ω–Ω–æ' || answerLower.includes('—É–¥–∞–ª–µ–Ω') || answerLower.includes('remote')) return 'remote';
  if (answerLower === '–¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥' || answerLower.includes('–¥—Ä—É–≥–æ–π') || answerLower.includes('–Ω–µ –≤–∞–∂–Ω–æ')) return 'other';
  return 'other';
}

// Clarifier: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
async function generateClarifyingQuestions(
  intent: any,
  persona: UserPersona
): Promise<{ content: string; buttons: string[] }> {
  const professions = getAvailableProfessions();
  
  const prompt = `–¢—ã AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π 2-3 —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–ù–∞–º–µ—Ä–µ–Ω–∏–µ: ${intent.intent}
–ò–∑–≤–ª–µ—á–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${JSON.stringify(intent.extractedInfo)}
–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${JSON.stringify(persona)}

–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏: ${professions.map((p) => p.profession).join(', ')}

${persona.isUncertain ? `
–í–ê–ñ–ù–û: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–Ω–∞–µ—Ç, —á–µ–≥–æ —Ö–æ—á–µ—Ç. –ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å:
- –ï–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ —Ö–æ–±–±–∏
- –ß—Ç–æ –µ–º—É –Ω—Ä–∞–≤–∏—Ç—Å—è –¥–µ–ª–∞—Ç—å
- –ö–∞–∫–∏–µ –Ω–∞–≤—ã–∫–∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å
- –ß—Ç–æ –¥–ª—è –Ω–µ–≥–æ –≤–∞–∂–Ω–æ –≤ —Ä–∞–±–æ—Ç–µ (—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å, —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ, –¥–µ–Ω—å–≥–∏, –ø–æ–º–æ—â—å –ª—é–¥—è–º –∏ —Ç.–¥.)
` : `
–í–ê–ñ–ù–û: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—â–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –∏–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ. –£—Ç–æ—á–Ω–∏:
- –£—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞
- –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—É—é —Å—Ñ–µ—Ä—É
- –ß—Ç–æ –≤–∞–∂–Ω–æ –≤ —Ä–∞–±–æ—Ç–µ
`}

–û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
  "content": "—Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞",
  "buttons": ["–≤–∞—Ä–∏–∞–Ω—Ç 1", "–≤–∞—Ä–∏–∞–Ω—Ç 2", "–≤–∞—Ä–∏–∞–Ω—Ç 3"]
}

–ö–Ω–æ–ø–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ (2-4 —Å–ª–æ–≤–∞) –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏.`;

  try {
    const response = await getAIClient().models.generateContent({
      model: 'gemini-2.0-flash',
      contents: prompt,
      config: {
        temperature: 0.7,
        responseMimeType: 'application/json',
      },
    });

    const result = JSON.parse(response.text || '{}');
    
    // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    return {
      content: result.content || '–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ç–æ–º, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?',
      buttons: result.buttons || ['–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞', '–î–∏–∑–∞–π–Ω', '–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç', '–ù–µ —É–≤–µ—Ä–µ–Ω'],
    };
  } catch (error: any) {
    console.error('Clarifying questions error:', error);
    console.error('Clarifying questions error details:', {
      message: error?.message,
      code: error?.code,
      status: error?.status,
    });
    return {
      content: '–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ç–æ–º, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?',
      buttons: ['–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞', '–î–∏–∑–∞–π–Ω', '–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç', '–ù–µ —É–≤–µ—Ä–µ–Ω'],
    };
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –∏–∑ HH API –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
async function fetchProfessionsFromHH(
  keywords: string[],
  limit: number = 20
): Promise<Array<{ name: string; count: number; area?: string }>> {
  try {
    // –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏–∑ HH API
    const professionsMap = new Map<string, number>();
    
    // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ HH API
    for (const keyword of keywords) {
      try {
        const response = await fetch(
          `https://api.hh.ru/vacancies?text=${encodeURIComponent(keyword)}&per_page=100&area=113&order_by=relevance`,
          { headers: { 'User-Agent': 'HH-Vibe-Career-App/1.0' } }
        );
        
        if (!response.ok) continue;
        
        const data = await response.json();
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –∏–∑ –≤–∞–∫–∞–Ω—Å–∏–π
        data.items?.forEach((vacancy: any) => {
          if (!vacancy.name) return;
          
          // –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤
          let professionName = vacancy.name
            .replace(/\(.*?\)/g, '') // –£–±–∏—Ä–∞–µ–º —Å–∫–æ–±–∫–∏
            .replace(/\s*–≤\s+–∫–æ–º–ø–∞–Ω–∏[—é–∏].*$/i, '') // –£–±–∏—Ä–∞–µ–º "–≤ –∫–æ–º–ø–∞–Ω–∏–∏ X"
            .replace(/\s*-\s*—É–¥–∞–ª—ë–Ω–Ω–æ.*$/i, '') // –£–±–∏—Ä–∞–µ–º "- —É–¥–∞–ª—ë–Ω–Ω–æ"
            .replace(/\s+/g, ' ')
            .trim();
          
          // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å –¥–æ –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ —Å–ª–µ—à–∞
          professionName = professionName.split(/[,/]/)[0].trim();
          
          // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –∏–ª–∏ –∫–æ—Ä–æ—Ç–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
          if (professionName.length < 3 || professionName.length > 50) return;
          
          // –°—á–∏—Ç–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –≤—Å—Ç—Ä–µ—á–∞–µ–º–æ—Å—Ç–∏
          const currentCount = professionsMap.get(professionName) || 0;
          professionsMap.set(professionName, currentCount + 1);
        });
      } catch (err) {
        logger.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ HH API', err, { keyword });
        continue;
      }
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —á–∞—Å—Ç–æ—Ç–µ –∏ –±–µ—Ä–µ–º —Ç–æ–ø
    const sortedProfessions = Array.from(professionsMap.entries())
      .sort((a, b) => b[1] - a[1])
      .slice(0, limit)
      .map(([name, count]) => ({ name, count }));
    
    logger.info('–ü–æ–ª—É—á–µ–Ω—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏–∑ HH API', { 
      count: sortedProfessions.length, 
      keywords 
    });
    
    return sortedProfessions;
  } catch (error: any) {
    logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –∏–∑ HH API', error);
    return [];
  }
}

// Uncertain User Flow: –ø–æ–¥–±–æ—Ä –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –¥–ª—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–∏–≤—à–∏—Ö—Å—è (—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º HH API)
async function suggestProfessionsForUncertainUser(
  persona: UserPersona,
  history: Message[]
): Promise<{ content: string; cards: any[] }> {
  const conversationContext = history
    .slice(-10)
    .map((m) => `${m.role}: ${m.content}`)
    .join('\n');

  // –®–∞–≥ 1: –ò—Å–ø–æ–ª—å–∑—É–µ–º LLM –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è HH
  const keywordsPrompt = `–¢—ã AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –æ–ø—Ä–µ–¥–µ–ª–∏, –∫–∞–∫–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –º–æ–≥—É—Ç –µ–º—É –ø–æ–¥–æ–π—Ç–∏.

–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${JSON.stringify(persona)}

–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:
${conversationContext}

–ù–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤, –Ω–∞–≤—ã–∫–æ–≤ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π 5-7 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –≤ –±–∞–∑–µ –≤–∞–∫–∞–Ω—Å–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: "—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "–¥–∏–∑–∞–π–Ω", "–ø—Ä–æ–¥–∞–∂–∏", "–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç", "–∞–Ω–∞–ª–∏—Ç–∏–∫–∞" –∏ —Ç.–¥.).

–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å:
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- –ù–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –ü–æ–¥—Ö–æ–¥—è—â–∏–º–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π

–û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
  "keywords": ["–∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ 1", "–∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ 2", ...],
  "reasoning": "–∫–æ—Ä–æ—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ—á–µ–º—É –≤—ã–±—Ä–∞–Ω—ã —ç—Ç–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
}`;

  let keywords: string[] = [];
  let reasoning = '';
  
  try {
    const keywordsResponse = await getAIClient().models.generateContent({
      model: 'gemini-2.0-flash',
      contents: keywordsPrompt,
      config: {
        temperature: 0.7,
        responseMimeType: 'application/json',
      },
    });

    const keywordsResult = JSON.parse(keywordsResponse.text || '{}');
    keywords = keywordsResult.keywords || [];
    reasoning = keywordsResult.reasoning || '';
    
    logger.info('–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è HH', { keywords, reasoning });
  } catch (error: any) {
    logger.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤', error);
    // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    keywords = ['—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', '–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç', '–¥–∏–∑–∞–π–Ω', '–∞–Ω–∞–ª–∏—Ç–∏–∫–∞'];
  }

  // –®–∞–≥ 2: –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –∏–∑ HH API
  const hhProfessions = await fetchProfessionsFromHH(keywords, 30);
  
  // –®–∞–≥ 3: –¢–∞–∫–∂–µ –ø–æ–ª—É—á–∞–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–∫–∞–∑–∞ –≥–æ—Ç–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
  const existingProfessions = getAvailableProfessions();
  
  // –®–∞–≥ 4: –ò—Å–ø–æ–ª—å–∑—É–µ–º LLM –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π
  const selectionPrompt = `–¢—ã AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ò–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –≤—ã–±–µ—Ä–∏ 3-5 –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${JSON.stringify(persona)}

–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:
${conversationContext}

–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏–∑ HeadHunter (–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏):
${hhProfessions.map((p, i) => `${i + 1}. ${p.name} (${p.count} –≤–∞–∫–∞–Ω—Å–∏–π)`).join('\n')}

–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≥–æ—Ç–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π:
${existingProfessions.map((p, i) => `${i + 1}. ${p.profession} (${p.level}) - slug: ${p.slug}`).join('\n')}

–í–ê–ñ–ù–û:
1. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ –≤—ã–±–∏—Ä–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏–∑ "–°—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≥–æ—Ç–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫", —Ç–∞–∫ –∫–∞–∫ –¥–ª—è –Ω–∏—Ö —É–∂–µ –µ—Å—Ç—å –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
2. –ï—Å–ª–∏ –≤ –≥–æ—Ç–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∞—Ö –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –≤—ã–±–∏—Ä–∞–π –∏–∑ —Å–ø–∏—Å–∫–∞ HH
3. –í—ã–±–∏—Ä–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–ª—å–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∏–Ω—Ç–µ—Ä–µ—Å–∞–º –∏ –Ω–∞–≤—ã–∫–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
4. –£—á–∏—Ç—ã–≤–∞–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π - –±–æ–ª—å—à–µ –≤–∞–∫–∞–Ω—Å–∏–π = –±–æ–ª—å—à–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π

–û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
  "content": "–∫–æ—Ä–æ—Ç–∫–æ–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –ø–æ—á–µ–º—É —ç—Ç–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –ø–æ–¥—Ö–æ–¥—è—Ç",
  "selectedProfessions": [
    {
      "name": "–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏",
      "source": "existing" –∏–ª–∏ "hh",
      "slug": "slug –µ—Å–ª–∏ source=existing, –∏–Ω–∞—á–µ null",
      "reason": "–ø–æ—á–µ–º—É —ç—Ç–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è –ø–æ–¥—Ö–æ–¥–∏—Ç (1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)"
    }
  ]
}`;

  try {
    const selectionResponse = await getAIClient().models.generateContent({
      model: 'gemini-2.0-flash',
      contents: selectionPrompt,
      config: {
        temperature: 0.6,
        responseMimeType: 'application/json',
      },
    });

    const result = JSON.parse(selectionResponse.text || '{}');
    const selectedProfessions = result.selectedProfessions || [];
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    const cards: any[] = [];
    
    for (const selected of selectedProfessions) {
      if (selected.source === 'existing' && selected.slug) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É
        const existing = existingProfessions.find(p => p.slug === selected.slug);
        if (existing) {
          cards.push({
            slug: existing.slug,
            profession: existing.profession,
            level: existing.level,
            company: existing.company,
            image: existing.image,
          });
        }
      } else if (selected.source === 'hh') {
        // –î–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –∏–∑ HH —Å–æ–∑–¥–∞–µ–º "–≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é" –∫–∞—Ä—Ç–æ—á–∫—É
        // –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ
        const professionSlug = transliterate(selected.name);
        cards.push({
          slug: professionSlug,
          profession: selected.name,
          level: 'Middle', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
          company: 'IT-–∫–æ–º–ø–∞–Ω–∏—è',
          image: null,
          isVirtual: true, // –§–ª–∞–≥ —á—Ç–æ –∫–∞—Ä—Ç–æ—á–∫–∞ –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞
        });
      }
    }
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 –∫–∞—Ä—Ç–æ—á–µ–∫
    const finalCards = cards.slice(0, 5);
    
    logger.info('–ü–æ–¥–æ–±—Ä–∞–Ω—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', { 
      count: finalCards.length,
      existing: finalCards.filter(c => !c.isVirtual).length,
      virtual: finalCards.filter(c => c.isVirtual).length
    });

    return {
      content: result.content || '–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –¥–ª—è —Ç–µ–±—è:',
      cards: finalCards,
    };
  } catch (error: any) {
    logger.error('–û—à–∏–±–∫–∞ –ø–æ–¥–±–æ—Ä–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π', error);
    
    // Fallback: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
    return {
      content: '–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –¥–ª—è —Ç–µ–±—è:',
      cards: existingProfessions.slice(0, 3).map((p) => ({
        slug: p.slug,
        profession: p.profession,
        level: p.level,
        company: p.company,
        image: p.image,
      })),
    };
  }
}

// Search Professions: –ø–æ–∏—Å–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É
async function searchProfessions(
  query: string,
  extractedInfo: any
): Promise<{ content: string; cards: any[]; shouldGenerate?: boolean; professionToGenerate?: string }> {
  const professions = getAvailableProfessions();
  const queryTrimmed = query.trim();
  
  // –ü—Ä—è–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –≤ extractedInfo, –∏—â–µ–º –ø–æ slug
  if (extractedInfo?.profession) {
    const professionName = extractedInfo.profession.trim();
    const professionSlug = transliterate(professionName);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à –Ω–∞–ø—Ä—è–º—É—é
    const cachedProfession = await getCachedCard(professionSlug);
    if (cachedProfession) {
      return {
        content: '–í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª:',
        cards: [{
          slug: cachedProfession.slug,
          profession: cachedProfession.profession,
          level: cachedProfession.level,
          company: cachedProfession.company,
          image: cachedProfession.images?.[0] || null,
        }],
      };
    }
    
    // –ò—â–µ–º –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é –Ω–∞–∑–≤–∞–Ω–∏—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏—è—Ö
    const exactMatch = professions.find((p) => 
      p.profession.toLowerCase() === professionName.toLowerCase() ||
      p.slug === professionSlug
    );
    
    if (exactMatch) {
      return {
        content: '–í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª:',
        cards: [exactMatch],
      };
    }
    
    // –ï—Å–ª–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ –µ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ - –∑–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    return {
      content: `–ü—Ä–æ—Ñ–µ—Å—Å–∏—è "${professionName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ. –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–∞—Ä—Ç–æ—á–∫—É...`,
      cards: [],
      shouldGenerate: true,
      professionToGenerate: professionName,
    };
  }
  
  // –ü—Ä—è–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –∫–æ—Ä–æ—Ç–∫–∏–π –∏ –ø–æ—Ö–æ–∂ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏)
  if (queryTrimmed.length > 0 && queryTrimmed.length < 50) {
    const querySlug = transliterate(queryTrimmed);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à –Ω–∞–ø—Ä—è–º—É—é
    const cachedProfession = await getCachedCard(querySlug);
    if (cachedProfession) {
      return {
        content: '–í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª:',
        cards: [{
          slug: cachedProfession.slug,
          profession: cachedProfession.profession,
          level: cachedProfession.level,
          company: cachedProfession.company,
          image: cachedProfession.images?.[0] || null,
        }],
      };
    }
    
    // –ò—â–µ–º –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é –Ω–∞–∑–≤–∞–Ω–∏—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏—è—Ö
    const exactMatch = professions.find((p) => 
      p.profession.toLowerCase() === queryTrimmed.toLowerCase() ||
      p.slug === querySlug ||
      queryTrimmed.toLowerCase().includes(p.profession.toLowerCase()) ||
      p.profession.toLowerCase().includes(queryTrimmed.toLowerCase())
    );
    
    if (exactMatch) {
      return {
        content: '–í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª:',
        cards: [exactMatch],
      };
    }
  }
  
  // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ—á–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º AI –¥–ª—è –ø–æ–∏—Å–∫–∞
  const prompt = `–¢—ã AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ù–∞–π–¥–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–ó–∞–ø—Ä–æ—Å: "${query}"
–ò–∑–≤–ª–µ—á–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${JSON.stringify(extractedInfo)}

–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ (—Ñ–æ—Ä–º–∞—Ç: –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ -> slug):
${professions.map((p, i) => `${i + 1}. "${p.profession}" -> slug: "${p.slug}" (${p.level}, ${p.company})`).join('\n')}

–í–ê–ñ–ù–û: –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ—á–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—é –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏–∑ —Å–ø–∏—Å–∫–∞, –≤–µ—Ä–Ω–∏ –µ—ë slug. –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø–æ—Ö–æ–∂ –Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞, –≤–µ—Ä–Ω–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π slug.

–û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
  "content": "–∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏—è—Ö",
  "professionSlugs": ["slug1", "slug2"]
}`;

  try {
    const response = await getAIClient().models.generateContent({
      model: 'gemini-2.0-flash',
      contents: prompt,
      config: {
        temperature: 0.3,
        responseMimeType: 'application/json',
      },
    });

    const result = JSON.parse(response.text || '{}');
    const selectedProfessions = professions.filter((p) =>
      result.professionSlugs?.includes(p.slug)
    );

    if (selectedProfessions.length === 0) {
      // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é –Ω–∞–∑–≤–∞–Ω–∏—è
      const queryLower = query.toLowerCase();
      const partialMatches = professions.filter((p) =>
        p.profession.toLowerCase().includes(queryLower) ||
        queryLower.includes(p.profession.toLowerCase())
      );
      
      if (partialMatches.length > 0) {
        return {
          content: result.content || '–í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª:',
          cards: partialMatches.slice(0, 3),
        };
      }
      
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏—è—Ö, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ HH
      logger.info('–ü–æ–∏—Å–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –≤ HH API', { query });
      try {
        const hhProfessions = await fetchProfessionsFromHH([query], 10);
        
        if (hhProfessions.length > 0) {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º LLM –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
          const hhSelectionPrompt = `–ò–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –≤—ã–±–µ—Ä–∏ 1-3 –Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "${query}".

–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏–∑ HeadHunter:
${hhProfessions.map((p, i) => `${i + 1}. ${p.name} (${p.count} –≤–∞–∫–∞–Ω—Å–∏–π)`).join('\n')}

–í—ã–±–∏—Ä–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∑–∞–ø—Ä–æ—Å—É.

–û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
  "content": "–∫–æ—Ä–æ—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ",
  "selectedNames": ["–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ 1", "–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ 2"]
}`;

          const hhSelectionResponse = await getAIClient().models.generateContent({
            model: 'gemini-2.0-flash',
            contents: hhSelectionPrompt,
            config: {
              temperature: 0.3,
              responseMimeType: 'application/json',
            },
          });

          const hhResult = JSON.parse(hhSelectionResponse.text || '{}');
          const selectedHHProfessions = hhProfessions.filter(p => 
            hhResult.selectedNames?.includes(p.name)
          );
          
          if (selectedHHProfessions.length > 0) {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ HH
            const hhCards = selectedHHProfessions.map(p => ({
              slug: transliterate(p.name),
              profession: p.name,
              level: 'Middle',
              company: 'IT-–∫–æ–º–ø–∞–Ω–∏—è',
              image: null,
              isVirtual: true,
              vacanciesCount: p.count,
            }));
            
            return {
              content: hhResult.content || `–ù–∞—à–µ–ª ${hhCards.length} ${hhCards.length === 1 ? '–ø—Ä–æ—Ñ–µ—Å—Å–∏—é' : '–ø—Ä–æ—Ñ–µ—Å—Å–∏–∏'} –ø–æ –∑–∞–ø—Ä–æ—Å—É "${query}" –≤ –±–∞–∑–µ –≤–∞–∫–∞–Ω—Å–∏–π:`,
              cards: hhCards,
            };
          }
        }
      } catch (error: any) {
        logger.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ HH API', error, { query });
      }
      
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏ –∑–∞–ø—Ä–æ—Å –ø–æ—Ö–æ–∂ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏, –ø—ã—Ç–∞–µ–º—Å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å
      if (queryTrimmed.length > 0 && queryTrimmed.length < 50) {
        return {
          content: `–ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ "${queryTrimmed}"...`,
          cards: [],
          shouldGenerate: true,
          professionToGenerate: queryTrimmed,
        };
      }
      
      return {
        content: '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–π, —Ç–æ—á–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –í–æ—Ç —á—Ç–æ –µ—Å—Ç—å:',
        cards: professions.slice(0, 3),
      };
    }

    return {
      content: result.content || '–í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª:',
      cards: selectedProfessions,
    };
  } catch (error: any) {
    console.error('Search error:', error);
    console.error('Search error details:', {
      message: error?.message,
      code: error?.code,
      status: error?.status,
    });
    return {
      content: '–í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª:',
      cards: professions.slice(0, 2),
    };
  }
}

// Main handler
export async function POST(request: NextRequest) {
  const requestStartTime = Date.now();
  try {
    const body: ChatRequest = await request.json();
    const { message, history, persona: currentPersona } = body;
    
    logger.info('Chat API: –ø–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å', { 
      messageLength: message.length, 
      historyLength: history.length,
      hasPersona: !!currentPersona
    });

    // –®–∞–≥ 0: –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Å—Ü–µ–Ω–∞—Ä–∏—è
    if (history.length === 0) {
      logger.debug('Chat API: –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ');
      const greeting = await generateGreeting();
      const chatResponse: ChatResponse = {
        message: {
          type: 'buttons',
          content: greeting.content,
          buttons: greeting.buttons,
          metadata: {
            isGreeting: true,
          },
        },
        persona: currentPersona || { isUncertain: false },
        stage: 'initial',
      };
      logger.info('Chat API: –æ—Ç–≤–µ—Ç (–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ)', { duration: Date.now() - requestStartTime });
      return NextResponse.json(chatResponse);
    }

    // Step 1: Parse intent
    logger.trace('Chat API: –ø–∞—Ä—Å–∏–Ω–≥ intent', { message });
    const intentStartTime = Date.now();
    const intent = await parseIntent(message, history);
    logger.debug('Chat API: intent –æ–ø—Ä–µ–¥–µ–ª–µ–Ω', { 
      intent: intent.intent, 
      confidence: intent.confidence,
      duration: Date.now() - intentStartTime
    });

    // Step 2: Detect/update persona
    const personaStartTime = Date.now();
    const persona = await detectPersona(message, history, currentPersona || null);
    logger.debug('Chat API: persona –æ–±–Ω–æ–≤–ª–µ–Ω–∞', { 
      persona, 
      duration: Date.now() - personaStartTime 
    });

    // Step 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    const lastAssistantMessage = history
      .slice()
      .reverse()
      .find((m) => m.role === 'assistant');
    
    const isAnsweringProfessionClarification = lastAssistantMessage?.metadata?.isProfessionClarification === true;
    const professionToClarify = lastAssistantMessage?.metadata?.professionToClarify;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞ –∫–∞–∫–æ–º —ç—Ç–∞–ø–µ —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è
    const clarificationStep = lastAssistantMessage?.metadata?.clarificationStep;
    const professionForClarification = lastAssistantMessage?.metadata?.professionForClarification;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–≥—Ä–æ–≤–æ–π –¥–µ–Ω—å
    const isInGameDay = lastAssistantMessage?.metadata?.isGameDay === true;
    const gameDayProfession = lastAssistantMessage?.metadata?.profession;
    const gameDayStep = lastAssistantMessage?.metadata?.step || 1;
    const gameDayTime = lastAssistantMessage?.metadata?.time || '09:00';
    const gameDaySituation = lastAssistantMessage?.metadata?.situation || 'start';
    const isLastGameDayStep = lastAssistantMessage?.metadata?.isLastStep === true;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π "–Ω–µ –∑–Ω–∞—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é"
    const isInUncertainFlow = lastAssistantMessage?.metadata?.uncertainFlow === true;
    const uncertainFlowStep = lastAssistantMessage?.metadata?.uncertainFlowStep || 0;

    // Step 4: Decide response based on intent and context
    let responseMessage: any = {
      type: 'text',
      content: '–ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å?',
    };

    let stage: ChatResponse['stage'] = 'initial';

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è –∏–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    if (lastAssistantMessage?.metadata?.isGreeting === true) {
      const messageLower = message.toLowerCase();
      
      if (messageLower.includes('–∑–Ω–∞—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é') || messageLower.includes('üéØ')) {
        // –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ó–Ω–∞—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é
        responseMessage = {
          type: 'text',
          content: '–û—Ç–ª–∏—á–Ω–æ! –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏, –∫–æ—Ç–æ—Ä–∞—è —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç, –∏ —è –ø–æ–∫–∞–∂—É –µ—ë –≤–∞–π–± ‚ú®',
        };
        stage = 'initial';
      } else if (messageLower.includes('–ø–æ–º–æ–≥–∏') || messageLower.includes('–≤—ã–±—Ä–∞—Ç—å') || messageLower.includes('ü§î')) {
        // –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ù–µ –∑–Ω–∞—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é
        persona.isUncertain = true;
        const questions = await generateSoftQuestions(0, history);
        responseMessage = {
          type: 'buttons',
          content: `–û–∫–µ–π, –¥–∞–≤–∞–π –Ω–∞—â—É–ø–∞–µ–º —Ç–≤–æ–π –≤–∞–π–± üåø\n\n${questions.content}`,
          buttons: questions.buttons,
          metadata: {
            uncertainFlow: true,
            uncertainFlowStep: 0,
          },
        };
        stage = 'clarifying';
      } else if (messageLower.includes('–ø—Ä–æ–∂–∏—Ç—å –¥–µ–Ω—å') || messageLower.includes('üéÆ')) {
        // –°—Ü–µ–Ω–∞—Ä–∏–π 3: –ò–≥—Ä–æ–≤–æ–π –¥–µ–Ω—å
        responseMessage = {
          type: 'text',
          content: '–ö—Ä—É—Ç–æ! –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏, –∏ —Ç—ã –ø—Ä–æ–∂–∏–≤—ë—à—å —Ü–µ–ª—ã–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å –≤ —ç—Ç–æ–π —Ä–æ–ª–∏ üéÆ',
          metadata: {
            awaitingGameDayProfession: true,
          },
        };
        stage = 'initial';
      } else if (messageLower.includes('—Å—Ä–∞–≤–Ω–∏—Ç—å') || messageLower.includes('‚öñÔ∏è')) {
        // –°—Ü–µ–Ω–∞—Ä–∏–π 4: –°—Ä–∞–≤–Ω–∏—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
        responseMessage = {
          type: 'text',
          content: '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –ù–∞–ø–∏—à–∏ –¥–≤–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –∏ —è —Å—Ä–∞–≤–Ω—é –∏—Ö –¥–ª—è —Ç–µ–±—è. –ù–∞–ø—Ä–∏–º–µ—Ä: "Frontend-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, Backend-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫"',
          metadata: {
            awaitingCompareProfessions: true,
          },
        };
        stage = 'initial';
      } else {
        // –ï—Å–ª–∏ –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç, –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        const greeting = await generateGreeting();
        responseMessage = {
          type: 'buttons',
          content: greeting.content,
          buttons: greeting.buttons,
          metadata: {
            isGreeting: true,
          },
        };
        stage = 'initial';
      }
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –¥–Ω—è
    else if (isInGameDay && gameDayProfession) {
      if (isLastGameDayStep || message.toLowerCase().includes('–∑–∞–≤–µ—Ä—à–∏—Ç—å')) {
        // –ö–æ–Ω–µ—Ü –∏–≥—Ä–æ–≤–æ–≥–æ –¥–Ω—è
        responseMessage = {
          type: 'text',
          content: `üéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –¢—ã –ø—Ä–æ–∂–∏–ª –¥–µ–Ω—å –∫–∞–∫ ${gameDayProfession}. –¢–µ–ø–µ—Ä—å —Ç—ã –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞–µ—à—å, –∫–∞–∫–æ–≤–æ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —ç—Ç–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏!\n\n–•–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é?`,
          buttons: ['–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É', '–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é', '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'],
        };
        stage = 'showing_results';
      } else {
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–≥—Ä–æ–≤–æ–π –¥–µ–Ω—å
        const nextStep = await continueGameDay(
          gameDayProfession,
          message,
          gameDayStep,
          gameDayTime,
          gameDaySituation
        );
        responseMessage = {
          type: 'buttons',
          content: nextStep.content,
          buttons: nextStep.buttons,
          metadata: nextStep.metadata,
        };
        stage = 'clarifying';
      }
    }
    // –û–∂–∏–¥–∞–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ –¥–Ω—è
    else if (lastAssistantMessage?.metadata?.awaitingGameDayProfession === true) {
      const professionName = intent.extractedInfo?.profession || message.trim();
      const gameDay = await generateGameDay(professionName);
      responseMessage = {
        type: 'buttons',
        content: gameDay.content,
        buttons: gameDay.buttons,
        metadata: gameDay.metadata,
      };
      stage = 'clarifying';
    }
    // –û–∂–∏–¥–∞–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    else if (lastAssistantMessage?.metadata?.awaitingCompareProfessions === true) {
      const parts = message.split(',').map((s) => s.trim());
      if (parts.length >= 2) {
        const comparison = await compareProfessions(parts[0], parts[1]);
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        let comparisonText = `${comparison.content}\n\n`;
        if (comparison.comparison && Object.keys(comparison.comparison).length > 0) {
          comparisonText += `üìä **${parts[0]}** vs **${parts[1]}**\n\n`;
          
          const labels: Record<string, string> = {
            schedule: 'üìÖ –ì—Ä–∞—Ñ–∏–∫',
            stress: 'üò∞ –°—Ç—Ä–µ—Å—Å',
            skills: 'üéØ –ù–∞–≤—ã–∫–∏',
            growth: 'üìà –ö–∞—Ä—å–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç',
            impact: 'üí° –í–ª–∏—è–Ω–∏–µ',
            format: 'üè¢ –§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã',
            salary: 'üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞',
          };
          
          for (const [key, label] of Object.entries(labels)) {
            if (comparison.comparison[key]) {
              comparisonText += `${label}:\n`;
              comparisonText += `‚Ä¢ ${parts[0]}: ${comparison.comparison[key].profession1}\n`;
              comparisonText += `‚Ä¢ ${parts[1]}: ${comparison.comparison[key].profession2}\n\n`;
            }
          }
        }
        
        responseMessage = {
          type: 'text',
          content: comparisonText,
        };
        stage = 'showing_results';
      } else {
        responseMessage = {
          type: 'text',
          content: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –¥–≤–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. –ù–∞–ø—Ä–∏–º–µ—Ä: "–ë–∞—Ä–∏—Å—Ç–∞, –ú–∞—Å—Å–∞–∂–∏—Å—Ç"',
          metadata: {
            awaitingCompareProfessions: true,
          },
        };
        stage = 'initial';
      }
    }
    // –°—Ü–µ–Ω–∞—Ä–∏–π 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –º—è–≥–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–∏–≤—à–∏—Ö—Å—è
    else if (isInUncertainFlow && uncertainFlowStep < 3) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –ø–µ—Ä—Å–æ–Ω—É
      if (uncertainFlowStep === 0) {
        persona.interests = persona.interests || [];
        persona.interests.push(message);
      } else if (uncertainFlowStep === 1) {
        persona.workStyle = message;
      } else if (uncertainFlowStep === 2) {
        persona.values = message;
      }
      
      const nextStep = uncertainFlowStep + 1;
      
      if (nextStep < 3) {
        // –ó–∞–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        const questions = await generateSoftQuestions(nextStep, history);
        responseMessage = {
          type: 'buttons',
          content: questions.content,
          buttons: questions.buttons,
          metadata: {
            uncertainFlow: true,
            uncertainFlowStep: nextStep,
          },
        };
        stage = 'clarifying';
      } else {
        // –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–¥–∞–Ω—ã, –ø–æ–¥–±–∏—Ä–∞–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
        const suggestions = await suggestProfessionsForUncertainUser(persona, history);
        responseMessage = {
          type: 'cards',
          content: `${suggestions.content}\n\n–í—ã–±–µ—Ä–∏ –ª—é–±—É—é, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ!`,
          cards: suggestions.cards,
        };
        stage = 'showing_results';
      }
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ –≤–ª–∏—è–Ω–∏–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
    else if (intent.intent === 'show_impact') {
      const professionName = intent.extractedInfo?.profession || 'Frontend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫';
      const impactInfo = await showProfessionImpact(professionName);
      
      let impactText = `${impactInfo.content}\n\n`;
      if (impactInfo.impact && Object.keys(impactInfo.impact).length > 0) {
        impactText += `üí° **–í–ª–∏—è–Ω–∏–µ ${professionName}:**\n\n`;
        if (impactInfo.impact.direct) {
          impactText += `üéØ –ü—Ä—è–º–æ–µ –≤–ª–∏—è–Ω–∏–µ: ${impactInfo.impact.direct}\n\n`;
        }
        if (impactInfo.impact.indirect) {
          impactText += `üåä –ö–æ—Å–≤–µ–Ω–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ: ${impactInfo.impact.indirect}\n\n`;
        }
        if (impactInfo.impact.examples && impactInfo.impact.examples.length > 0) {
          impactText += `üìä –ü—Ä–∏–º–µ—Ä—ã:\n`;
          impactInfo.impact.examples.forEach((ex: string) => {
            impactText += `‚Ä¢ ${ex}\n`;
          });
          impactText += '\n';
        }
        if (impactInfo.impact.importance) {
          impactText += `‚≠ê –ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ: ${impactInfo.impact.importance}`;
        }
      }
      
      responseMessage = {
        type: 'text',
        content: impactText,
      };
      stage = 'showing_results';
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ—Ö–æ–∂–∏—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π
    else if (intent.intent === 'show_similar') {
      const professionName = intent.extractedInfo?.profession || 
        (lastAssistantMessage?.cards?.[0]?.profession) || 
        'Frontend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫';
      
      const similarInfo = await showSimilarProfessions(professionName);
      
      responseMessage = {
        type: 'cards',
        content: similarInfo.content,
        cards: similarInfo.cards,
      };
      stage = 'showing_results';
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏–º–µ—Ä–æ–≤ –∑–∞–¥–∞—á
    else if (intent.intent === 'show_tasks') {
      const professionName = intent.extractedInfo?.profession || 
        (lastAssistantMessage?.cards?.[0]?.profession) || 
        'Frontend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫';
      
      const tasksInfo = await showTaskExamples(professionName);
      
      let tasksText = `${tasksInfo.content}\n\n`;
      if (tasksInfo.tasks && tasksInfo.tasks.length > 0) {
        tasksInfo.tasks.forEach((task: string, index: number) => {
          tasksText += `${index + 1}. ${task}\n`;
        });
      }
      
      responseMessage = {
        type: 'text',
        content: tasksText,
        buttons: ['–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Ö–æ–∂–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏', '–ö–∞—Ä—å–µ—Ä–Ω—ã–π –ø—É—Ç—å', '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'],
      };
      stage = 'showing_results';
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ –∫–∞—Ä—å–µ—Ä–Ω–æ–º —Ä–æ—Å—Ç–µ
    else if (intent.intent === 'show_career_details') {
      const professionName = intent.extractedInfo?.profession || 
        (lastAssistantMessage?.cards?.[0]?.profession) || 
        'Frontend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫';
      const currentLevel = intent.extractedInfo?.level;
      
      const careerInfo = await showCareerDetails(professionName, currentLevel);
      
      let careerText = `${careerInfo.content}\n\n`;
      if (careerInfo.details?.levels && careerInfo.details.levels.length > 0) {
        careerText += `üìà **–£—Ä–æ–≤–Ω–∏ –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞:**\n\n`;
        careerInfo.details.levels.forEach((level: any) => {
          careerText += `**${level.level}** (${level.duration})\n`;
          careerText += `üíº –û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏: ${level.responsibilities}\n`;
          careerText += `üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: ${level.salary}\n`;
          if (level.tips) {
            careerText += `üí° –°–æ–≤–µ—Ç—ã: ${level.tips}\n`;
          }
          careerText += '\n';
        });
      }
      if (careerInfo.details?.nextSteps) {
        careerText += `üéØ **–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:** ${careerInfo.details.nextSteps}`;
      }
      
      responseMessage = {
        type: 'text',
        content: careerText,
        buttons: ['–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Ö–æ–∂–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏', '–ü—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞—á', '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'],
      };
      stage = 'showing_results';
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ —Ä–∞–∑–ª–∏—á–∏—è—Ö —É—Ä–æ–≤–Ω–µ–π
    else if (intent.intent === 'explain_levels') {
      const professionName = intent.extractedInfo?.profession || 
        (lastAssistantMessage?.cards?.[0]?.profession) || 
        'Frontend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫';
      const levels = intent.extractedInfo?.levelsToCompare || ['Junior', 'Senior'];
      
      const levelInfo = await explainLevelDifferences(professionName, levels);
      
      let levelText = `${levelInfo.content}\n\n`;
      if (levelInfo.comparison && Object.keys(levelInfo.comparison).length > 0) {
        levelText += `üìä **–°—Ä–∞–≤–Ω–µ–Ω–∏–µ ${levels[0]} vs ${levels[1]}:**\n\n`;
        
        const labels: Record<string, string> = {
          experience: 'üìö –û–ø—ã—Ç',
          responsibilities: 'üíº –û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏',
          skills: 'üéØ –ù–∞–≤—ã–∫–∏',
          autonomy: 'üöÄ –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
          impact: 'üí° –í–ª–∏—è–Ω–∏–µ',
          salary: 'üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞',
        };
        
        for (const [key, label] of Object.entries(labels)) {
          if (levelInfo.comparison[key]) {
            levelText += `${label}:\n`;
            levelText += `‚Ä¢ ${levels[0]}: ${Array.isArray(levelInfo.comparison[key][levels[0]]) ? levelInfo.comparison[key][levels[0]].join(', ') : levelInfo.comparison[key][levels[0]]}\n`;
            levelText += `‚Ä¢ ${levels[1]}: ${Array.isArray(levelInfo.comparison[key][levels[1]]) ? levelInfo.comparison[key][levels[1]].join(', ') : levelInfo.comparison[key][levels[1]]}\n\n`;
          }
        }
      }
      
      responseMessage = {
        type: 'text',
        content: levelText,
        buttons: ['–ö–∞—Ä—å–µ—Ä–Ω—ã–π –ø—É—Ç—å', '–ü—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞—á', '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'],
      };
      stage = 'showing_results';
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
    else if (intent.intent === 'save_card') {
      const professionSlug = lastAssistantMessage?.cards?.[0]?.slug;
      
      if (professionSlug) {
        responseMessage = {
          type: 'text',
          content: `‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢—ã –º–æ–∂–µ—à—å:\n\n1. üì• **–°–∫–∞—á–∞—Ç—å PDF** ‚Äî –ø–µ—Ä–µ–π–¥–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–°–∫–∞—á–∞—Ç—å PDF –∫–∞—Ä—Ç–æ—á–∫—É"\n2. ‚≠ê **–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ** ‚Äî –æ—Ç–∫—Ä–æ–π –∫–∞—Ä—Ç–æ—á–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∏ –¥–æ–±–∞–≤—å –≤ –∑–∞–∫–ª–∞–¥–∫–∏\n3. üîó **–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É**: /profession/${professionSlug}\n\n–•–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏?`,
          buttons: ['–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É', '–ü–æ—Ö–æ–∂–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏', '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'],
          metadata: {
            professionSlug,
          },
        };
      } else {
        responseMessage = {
          type: 'text',
          content: '–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å üòä',
        };
      }
      stage = 'showing_results';
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è
    else if (intent.intent === 'share_card') {
      const professionSlug = lastAssistantMessage?.cards?.[0]?.slug;
      const professionName = lastAssistantMessage?.cards?.[0]?.profession;
      
      if (professionSlug) {
        const shareUrl = `${process.env.NEXT_PUBLIC_BASE_URL || 'https://hh-vibe.ru'}/profession/${professionSlug}`;
        responseMessage = {
          type: 'text',
          content: `üîó **–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–µ–π "${professionName}"**\n\n–°—Å—ã–ª–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:\n${shareUrl}\n\n–°–∫–æ–ø–∏—Ä—É–π —ç—Ç—É —Å—Å—ã–ª–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å –¥—Ä—É–∑—å—è–º! –û–Ω–∏ —Å–º–æ–≥—É—Ç –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –¥–Ω—è, –Ω–∞–≤—ã–∫–∞–º–∏ –∏ –∫–∞—Ä—å–µ—Ä–Ω—ã–º –ø—É—Ç—ë–º.`,
          buttons: ['–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É', '–ü–æ—Ö–æ–∂–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏', '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'],
        };
      } else {
        responseMessage = {
          type: 'text',
          content: '–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é, –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—á–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è üòä',
        };
      }
      stage = 'showing_results';
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –∏–∑ intent
    else if (intent.intent === 'compare_professions') {
      if (intent.extractedInfo?.professionsToCompare && intent.extractedInfo.professionsToCompare.length >= 2) {
        const prof1 = intent.extractedInfo.professionsToCompare[0];
        const prof2 = intent.extractedInfo.professionsToCompare[1];
        
        const comparison = await compareProfessions(prof1, prof2);
        
        let comparisonText = `${comparison.content}\n\n`;
        if (comparison.comparison && Object.keys(comparison.comparison).length > 0) {
          comparisonText += `üìä **${prof1}** vs **${prof2}**\n\n`;
          
          const labels: Record<string, string> = {
            schedule: 'üìÖ –ì—Ä–∞—Ñ–∏–∫',
            stress: 'üò∞ –°—Ç—Ä–µ—Å—Å',
            skills: 'üéØ –ù–∞–≤—ã–∫–∏',
            growth: 'üìà –ö–∞—Ä—å–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç',
            impact: 'üí° –í–ª–∏—è–Ω–∏–µ',
            format: 'üè¢ –§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã',
            salary: 'üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞',
          };
          
          for (const [key, label] of Object.entries(labels)) {
            if (comparison.comparison[key]) {
              comparisonText += `${label}:\n`;
              comparisonText += `‚Ä¢ ${prof1}: ${comparison.comparison[key].profession1}\n`;
              comparisonText += `‚Ä¢ ${prof2}: ${comparison.comparison[key].profession2}\n\n`;
            }
          }
        }
        
        responseMessage = {
          type: 'text',
          content: comparisonText,
        };
        stage = 'showing_results';
      } else {
        responseMessage = {
          type: 'text',
          content: '–°–∫–∞–∂–∏, –∫–∞–∫–∏–µ –¥–≤–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ —Ç—ã —Ö–æ—á–µ—à—å —Å—Ä–∞–≤–Ω–∏—Ç—å? –ù–∞–ø—Ä–∏–º–µ—Ä: "Frontend-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –∏ Backend-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫"',
          metadata: {
            awaitingCompareProfessions: true,
          },
        };
        stage = 'initial';
      }
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –¥–Ω—è –∏–∑ intent
    else if (intent.intent === 'game_day') {
      const professionName = intent.extractedInfo?.profession;
      if (professionName) {
        const gameDay = await generateGameDay(professionName);
        responseMessage = {
          type: 'buttons',
          content: gameDay.content,
          buttons: gameDay.buttons,
          metadata: gameDay.metadata,
        };
        stage = 'clarifying';
      } else {
        responseMessage = {
          type: 'text',
          content: '–ö—Ä—É—Ç–æ! –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏, –∏ —Ç—ã –ø—Ä–æ–∂–∏–≤—ë—à—å —Ü–µ–ª—ã–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å –≤ —ç—Ç–æ–π —Ä–æ–ª–∏ üéÆ',
          metadata: {
            awaitingGameDayProfession: true,
          },
        };
        stage = 'initial';
      }
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ (–ø—è—Ç—å —à–∞–≥–æ–≤: —É—Ä–æ–≤–µ–Ω—å, —Ñ–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã, —Ä–∞–∑–º–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏, –ª–æ–∫–∞—Ü–∏—è, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è)
    else if (clarificationStep && professionForClarification) {
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω—É —Å –æ—Ç–≤–µ—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (clarificationStep === 'level') {
        const mappedLevel = mapLevelAnswer(message);
        persona.experience = mappedLevel;
        
        // –ó–∞–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –æ —Ñ–æ—Ä–º–∞—Ç–µ —Ä–∞–±–æ—Ç—ã (–µ—Å–ª–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–µ–Ω)
        const workFormatQuestion = await generateWorkFormatQuestion(professionForClarification);
        
        if (workFormatQuestion) {
          // –í–æ–ø—Ä–æ—Å —Ä–µ–ª–µ–≤–∞–Ω—Ç–µ–Ω - –∑–∞–¥–∞–µ–º –µ–≥–æ
          responseMessage = {
            type: 'buttons',
            content: workFormatQuestion.content,
            buttons: workFormatQuestion.buttons,
            metadata: {
              clarificationStep: 'work_format',
              professionForClarification,
              professionDescription: lastAssistantMessage?.metadata?.professionDescription,
            },
          };
          stage = 'clarifying';
        } else {
          // –í–æ–ø—Ä–æ—Å –Ω–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–∞–∑–º–µ—Ä—É –∫–æ–º–ø–∞–Ω–∏–∏
          const companySizeQuestion = await generateCompanySizeQuestion(professionForClarification);
          responseMessage = {
            type: 'buttons',
            content: companySizeQuestion.content,
            buttons: companySizeQuestion.buttons,
            metadata: {
              clarificationStep: 'company_size',
              professionForClarification,
              professionDescription: lastAssistantMessage?.metadata?.professionDescription,
            },
          };
          stage = 'clarifying';
        }
      } else if (clarificationStep === 'work_format') {
        const workFormat = mapWorkFormatAnswer(message);
        // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —É–¥–∞–ª–µ–Ω–∫–∞ –∏–ª–∏ –≥–∏–±—Ä–∏–¥, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º location –≤ remote
        if (workFormat === 'remote' || workFormat === 'hybrid') {
          persona.location = 'remote';
        }
        persona.workStyle = workFormat;
        
        // –ó–∞–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –æ —Ä–∞–∑–º–µ—Ä–µ –∫–æ–º–ø–∞–Ω–∏–∏
        const companySizeQuestion = await generateCompanySizeQuestion(professionForClarification);
        responseMessage = {
          type: 'buttons',
          content: companySizeQuestion.content,
          buttons: companySizeQuestion.buttons,
          metadata: {
            clarificationStep: 'company_size',
            professionForClarification,
            professionDescription: lastAssistantMessage?.metadata?.professionDescription,
          },
        };
        stage = 'clarifying';
      } else if (clarificationStep === 'company_size') {
        persona.companySize = mapCompanySizeAnswer(message);
        
        // –ï—Å–ª–∏ –ª–æ–∫–∞—Ü–∏—è –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (–Ω–µ —É–¥–∞–ª–µ–Ω–∫–∞), –∑–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å –æ –ª–æ–∫–∞—Ü–∏–∏
        if (!persona.location || persona.location !== 'remote') {
          const locationQuestion = await generateLocationQuestion(professionForClarification);
          responseMessage = {
            type: 'buttons',
            content: locationQuestion.content,
            buttons: locationQuestion.buttons,
            metadata: {
              clarificationStep: 'location',
              professionForClarification,
              professionDescription: lastAssistantMessage?.metadata?.professionDescription,
            },
          };
          stage = 'clarifying';
        } else {
          // –ï—Å–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–∫–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
          const specializationQuestion = await generateSpecializationQuestion(professionForClarification);
          responseMessage = {
            type: 'buttons',
            content: specializationQuestion.content,
            buttons: specializationQuestion.buttons,
            metadata: {
              clarificationStep: 'specialization',
              professionForClarification,
              professionDescription: lastAssistantMessage?.metadata?.professionDescription,
            },
          };
          stage = 'clarifying';
        }
      } else if (clarificationStep === 'location') {
        persona.location = mapLocationAnswer(message);
        
        // –ó–∞–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        const specializationQuestion = await generateSpecializationQuestion(professionForClarification);
        responseMessage = {
          type: 'buttons',
          content: specializationQuestion.content,
          buttons: specializationQuestion.buttons,
          metadata: {
            clarificationStep: 'specialization',
            professionForClarification,
            professionDescription: lastAssistantMessage?.metadata?.professionDescription,
          },
        };
        stage = 'clarifying';
      } else if (clarificationStep === 'specialization') {
        persona.specialization = message;
        
        // –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–¥–∞–Ω—ã, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
        try {
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —É—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
          const levelMap: Record<string, string> = {
            'student': 'Junior',
            'junior': 'Junior',
            'middle': 'Middle',
            'senior': 'Senior'
          };
          const level = levelMap[persona.experience || 'middle'] || 'Middle';
          
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–∞
          const companyMap: Record<string, string> = {
            'startup': '—Å—Ç–∞—Ä—Ç–∞–ø',
            'medium': '—Å—Ä–µ–¥–Ω—è—è –∫–æ–º–ø–∞–Ω–∏—è',
            'large': '–∫—Ä—É–ø–Ω–∞—è –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏—è',
            'any': 'IT-–∫–æ–º–ø–∞–Ω–∏—è'
          };
          const company = companyMap[persona.companySize || 'any'] || 'IT-–∫–æ–º–ø–∞–Ω–∏—è';
          
          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
          const generatedCard = await generateCard(
            professionForClarification,
            level,
            company,
            {
              companySize: persona.companySize,
              location: persona.location,
              specialization: persona.specialization,
              professionDescription: lastAssistantMessage?.metadata?.professionDescription,
            }
          );
          
        responseMessage = {
          type: 'cards',
          content: `–û—Ç–ª–∏—á–Ω–æ! –Ø —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ "${professionForClarification}" —Å —É—á–µ—Ç–æ–º –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π:\n\n‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: ${level}\n‚Ä¢ –§–æ—Ä–º–∞—Ç: ${persona.workStyle === 'remote' ? '–£–¥–∞–ª—ë–Ω–∫–∞' : persona.workStyle === 'office' ? '–û—Ñ–∏—Å' : '–ì–∏–±—Ä–∏–¥'}\n‚Ä¢ –ö–æ–º–ø–∞–Ω–∏—è: ${company}\n‚Ä¢ –õ–æ–∫–∞—Ü–∏—è: ${persona.location === 'moscow' ? '–ú–æ—Å–∫–≤–∞' : persona.location === 'spb' ? '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥' : persona.location === 'remote' ? '–£–¥–∞–ª—ë–Ω–Ω–æ' : '–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥'}\n${persona.specialization ? `‚Ä¢ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: ${persona.specialization}` : ''}\n\n–ß—Ç–æ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ?`,
          cards: [{
            slug: generatedCard.slug,
            profession: generatedCard.profession,
            level: generatedCard.level,
            company: generatedCard.company,
            image: generatedCard.images?.[0] || null,
          }],
          buttons: ['üìã –ü—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞—á', 'üìà –ö–∞—Ä—å–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç', 'üîç –ü–æ—Ö–æ–∂–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏', 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å'],
          metadata: {
            showingProfessionCard: true,
            currentProfession: professionForClarification,
          },
        };
        stage = 'showing_results';
        } catch (error: any) {
          console.error('Generation error:', error);
          responseMessage = {
            type: 'text',
            content: `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è "${professionForClarification}". –û—à–∏–±–∫–∞: ${error.message}`,
          };
          stage = 'initial';
        }
      }
    } else if (isAnsweringProfessionClarification && professionToClarify) {
      // –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ —É—Ç–æ—á–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ - —Ç–µ–ø–µ—Ä—å –ø–æ—Å–ª–µ –Ω–µ–µ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–∏ –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–∞
      try {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —É—Ç–æ—á–Ω–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const professionDescription = await extractProfessionDescription(
          professionToClarify,
          message,
          history
        );
        
        // –¢–µ–ø–µ—Ä—å –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Å—Ä–∞–∑—É, –∞ –∑–∞–¥–∞–µ–º –ø–µ—Ä–≤—ã–π —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å –æ–± —É—Ä–æ–≤–Ω–µ
        const levelQuestion = await generateLevelQuestion(professionToClarify);
        responseMessage = {
          type: 'buttons',
          content: `–û—Ç–ª–∏—á–Ω–æ! –ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è "${professionToClarify}", —É—Ç–æ—á–Ω–∏ –ø–∞—Ä—É –¥–µ—Ç–∞–ª–µ–π üëá\n\n${levelQuestion.content}`,
          buttons: levelQuestion.buttons,
          metadata: {
            clarificationStep: 'level',
            professionForClarification: professionToClarify,
            professionDescription: professionDescription || undefined,
          },
        };
        stage = 'clarifying';
      } catch (error: any) {
        console.error('Clarification error:', error);
        responseMessage = {
          type: 'text',
          content: `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`,
        };
        stage = 'initial';
      }
    } else if (intent.intent === 'uncertain' || persona.isUncertain) {
      // Uncertain flow
      if (history.length <= 2) {
        // First interaction - ask clarifying questions
        const questions = await generateClarifyingQuestions(intent, persona);
        responseMessage = {
          type: 'buttons',
          content: questions.content,
          buttons: questions.buttons,
        };
        stage = 'clarifying';
      } else {
        // After some questions - suggest professions
        const suggestions = await suggestProfessionsForUncertainUser(persona, history);
        responseMessage = {
          type: 'cards',
          content: `${suggestions.content}\n\n–í—ã–±–µ—Ä–∏ –ª—é–±—É—é, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ!`,
          cards: suggestions.cards,
        };
        stage = 'showing_results';
      }
    } else if (intent.intent === 'search_profession') {
      // Search flow
      const results = await searchProfessions(message, intent.extractedInfo);
      
      // –ï—Å–ª–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ –Ω—É–∂–Ω–æ –µ—ë —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å
      if (results.shouldGenerate && results.professionToGenerate) {
        try {
          const professionName = results.professionToGenerate;
          
          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
          const clarification = await generateProfessionClarificationQuestion(professionName, history);
          
          responseMessage = {
            type: 'buttons',
            content: clarification.content,
            buttons: clarification.buttons,
            metadata: {
              isProfessionClarification: true,
              professionToClarify: professionName,
            },
          };
          stage = 'clarifying';
        } catch (error: any) {
          console.error('Clarification question generation error:', error);
          // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å, —Å—Ä–∞–∑—É –∑–∞–¥–∞–µ–º –ø–µ—Ä–≤—ã–π —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å –æ–± —É—Ä–æ–≤–Ω–µ
          const professionName = results.professionToGenerate;
          const levelQuestion = await generateLevelQuestion(professionName);
          
          responseMessage = {
            type: 'buttons',
            content: `–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è "${professionName}", —É—Ç–æ—á–Ω–∏ –ø–∞—Ä—É –¥–µ—Ç–∞–ª–µ–π üëá\n\n${levelQuestion.content}`,
            buttons: levelQuestion.buttons,
            metadata: {
              clarificationStep: 'level',
              professionForClarification: professionName,
            },
          };
          stage = 'clarifying';
        }
      } else if (results.cards && results.cards.length === 1) {
        // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞ —Ä–æ–≤–Ω–æ –æ–¥–Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è, –∑–∞–¥–∞–µ–º —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –∫–∞—Ä—Ç–æ—á–∫–∏
        const professionName = results.cards[0].profession;
        const levelQuestion = await generateLevelQuestion(professionName);
        
        responseMessage = {
          type: 'buttons',
          content: `–û—Ç–ª–∏—á–Ω–æ! –Ø –Ω–∞—à–µ–ª –ø—Ä–æ—Ñ–µ—Å—Å–∏—é "${professionName}". –ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –ø–æ–∫–∞–∂—É –∫–∞—Ä—Ç–æ—á–∫—É, —É—Ç–æ—á–Ω–∏ –ø–∞—Ä—É –¥–µ—Ç–∞–ª–µ–π üëá\n\n${levelQuestion.content}`,
          buttons: levelQuestion.buttons,
          metadata: {
            clarificationStep: 'level',
            professionForClarification: professionName,
            existingProfessionSlug: results.cards[0].slug,
          },
        };
        stage = 'clarifying';
      } else {
        // –û–±—ã—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ (–Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π)
        const hasMultipleCards = results.cards && results.cards.length > 1;
        responseMessage = {
          type: 'cards',
          content: hasMultipleCards ? `${results.content}\n\n–í—ã–±–µ—Ä–∏ –ª—é–±—É—é, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ!` : `${results.content}\n\n–ß—Ç–æ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ?`,
          cards: results.cards,
          buttons: hasMultipleCards ? undefined : ['üìã –ü—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞—á', 'üìà –ö–∞—Ä—å–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç', 'üîç –ü–æ—Ö–æ–∂–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏', 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å'],
          metadata: hasMultipleCards ? undefined : {
            showingProfessionCard: true,
            currentProfession: results.cards[0]?.profession,
          },
        };
        stage = 'showing_results';
      }
    } else if (intent.intent === 'clarification') {
      // Continue clarifying
      if (history.length < 8) {
        const questions = await generateClarifyingQuestions(intent, persona);
        responseMessage = {
          type: 'buttons',
          content: questions.content,
          buttons: questions.buttons,
        };
        stage = 'clarifying';
      } else {
        // Enough info - show results
        const suggestions = await suggestProfessionsForUncertainUser(persona, history);
        responseMessage = {
          type: 'cards',
          content: suggestions.content,
          cards: suggestions.cards,
        };
        stage = 'showing_results';
      }
    } else {
      // General chat
      const prompt = `–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. 
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: "${message}"
–û—Ç–≤–µ—Ç—å –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ-–¥—Ä—É–∂–µ—Å–∫–∏. –ù–∞–ø—Ä–∞–≤—å —Ä–∞–∑–≥–æ–≤–æ—Ä –∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—é –∫–∞—Ä—å–µ—Ä—ã.`;

      const response = await getAIClient().models.generateContent({
        model: 'gemini-2.0-flash',
        contents: prompt,
        config: { temperature: 0.8 },
      });

      responseMessage = {
        type: 'text',
        content: response.text || '',
      };
      stage = 'initial';
    }

    // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ content –≤ –æ—Ç–≤–µ—Ç–µ
    if (!responseMessage.content) {
      responseMessage.content = '–ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å?';
    }

    const chatResponse: ChatResponse = {
      message: responseMessage,
      persona,
      stage,
    };

    const totalDuration = Date.now() - requestStartTime;
    logger.performance('Chat API: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞', totalDuration, { 
      intent: intent.intent, 
      stage,
      messageType: responseMessage.type
    });
    logger.info('Chat API: –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω', { duration: totalDuration });

    return NextResponse.json(chatResponse);
  } catch (error: any) {
    const totalDuration = Date.now() - requestStartTime;
    logger.error('Chat API: –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞', error, {
      message: error?.message,
      stack: error?.stack,
      name: error?.name,
      HTTP_PROXY: process.env.HTTP_PROXY ? '–Ω–∞—Å—Ç—Ä–æ–µ–Ω' : '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
      HTTPS_PROXY: process.env.HTTPS_PROXY ? '–Ω–∞—Å—Ç—Ä–æ–µ–Ω' : '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
      duration: totalDuration
    });
    
    return NextResponse.json(
      { 
        error: 'Internal server error',
        message: error?.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞',
        details: process.env.NODE_ENV === 'development' ? error?.stack : undefined
      },
      { status: 500 }
    );
  }
}

